## FRAGMENTS:
fragment ChannelBasicData on Channel {
  id
  name
  slug
  currencyCode
  isActive
  defaultCountry {
    code
    country
  }
}

fragment ChannelErrors on ChannelError {
  field
  message
  code
  shippingZones
  warehouses
}

fragment ChannelWithSettings on Channel {
  ...ChannelBasicData
  stockSettings {
    allocationStrategy
  }
  orderSettings {
    allowUnpaidOrders
    automaticallyConfirmAllNewOrders
    automaticallyFulfillNonShippableGiftCard
    expireOrdersAfter
  }
}

## --------------------
## WE WILL CREATE A CHANNEL
mutation CreateChannel {
  channelCreate(input: {
      currencyCode: "USD"
      defaultCountry: US
      name: "Mobile"
      slug: "mobile"
      stockSettings: { allocationStrategy: PRIORITIZE_HIGH_STOCK }
    }) {
    channel {
      ...ChannelWithSettings
    }
    errors {
      ...ChannelErrors
    }
  }
}

THIS RETURNED US THIS:
{
  "data": {
    "channelCreate": {
      "channel": {
        "id": "Q2hhbm5lbDo2",
        "name": "Mobile",
        "slug": "mobile",
        "currencyCode": "USD",
        "isActive": false,
        "defaultCountry": {
          "code": "US",
          "country": "United States of America"
        },
        "stockSettings": {
          "allocationStrategy": "PRIORITIZE_HIGH_STOCK"
        },
        "orderSettings": {
          "allowUnpaidOrders": false,
          "automaticallyConfirmAllNewOrders": true,
          "automaticallyFulfillNonShippableGiftCard": true,
          "expireOrdersAfter": null
        }
      },
      "errors": []
    }
  },
  "extensions": {
    "cost": {
      "requestedQueryCost": 0,
      "maximumAvailable": 50000
    }
  }
}

# WE ASSUME THAT UPON CREATING AN ACCOUNT, I WILL CREATE A CHANNEL ALONGSIDE THE WAREHOUSE NAME
# SO THE FIRST THING BECOMES LINKING CHANNEL TO WAREHOUSE


SO FIRST I CREATE A WAREHOUSE THEN WE LINK:
mutation {
  createWarehouse(input: {
    name: "Kamakis Greenspot Gardens",
    slug: "kamakis-greenspot-gardens",
    email: "online@greenspotkamakis.com",
    address: {
      streetAddress1: "Ruiru",
      city: "Nairobi",
      country: KE,
      postalCode: "00200",
      companyName: "Greenspot Lounge Inc",
    }
  }){
    warehouse {
      id
      name
      slug
      email
      address {
        id
        companyName
      }
    }
    errors {
      message
      field
      code
    }
  }
}
IT RETUERNED:
{
  "data": {
    "createWarehouse": {
      "warehouse": {
        "id": "V2FyZWhvdXNlOjNlMTUwNDRiLWIyNGUtNDA1Mi1hNWY1LTVhOTI3MTE5M2I5Nw==",
        "name": "Kamakis Greenspot Gardens",
        "slug": "kamakis-greenspot-gardens",
        "email": "online@greenspotkamakis.com",
        "address": {
          "id": "QWRkcmVzczoxNDA=",
          "companyName": "Greenspot Lounge Inc"
        }
      },
      "errors": []
    }
  },
  "extensions": {
    "cost": {
      "requestedQueryCost": 0,
      "maximumAvailable": 50000
    }
  }
}

LET US LINK THE WAREHOUSE NOW:
mutation LinkWarehouseToChannel {
  channelUpdate(
    id: "Q2hhbm5lbDo2", # remember our channelId was this!
    input: {
      # warehouseId as we got it...
      addWarehouses: ["V2FyZWhvdXNlOjNlMTUwNDRiLWIyNGUtNDA1Mi1hNWY1LTVhOTI3MTE5M2I5Nw=="]
    }
  ) {
    channel { id }
    errors { message }
  }
}

RETUERNED:
{
  "data": {
    "channelUpdate": {
      "channel": {
        "id": "Q2hhbm5lbDo2"
      },
      "errors": []
    }
  },
  "extensions": {
    "cost": {
      "requestedQueryCost": 0,
      "maximumAvailable": 50000
    }
  }
}


THAT IS SOMETHING WE WILL DEFINITELY KEEP DOING IN OUR SAAS PLATFORM. BUT HERE COMES THE ABILITY FOR US TO ADD PRODUCTS. We are adding like the brandowner
or the SYSTEM admin. IF EVERYONE HAS TO CREATE A PRODUCT FROM SRATCH EVERYTIME THEY HAVE TO USE OUR PLATFORM. THEN WE HAVE FAILED.
It is upto the system to bulk create every product the system has, but at the same time, its not easy to automate everything coz we are building
a SaaS platform on top of Saleor for Multi tenancy meaning everyone has their own inventory and channel for security reasons. Everytime a product is created 
by Brand Owner like Kenya Wines Agencies or EABL, it goes to a Redis cache to enable instant search, at the POS for them..
But we have to remember that we have to bulk create products for the users, this happens by dumping every product they have (Kinda basic seeding) because we know
that our platform is in liqour business for everyone. Behind the scenes we will abstract alot of complexity, all they have to do is go through the products 
and update the stock no dealing with product types or whatever, coz the market has like 3k Liqour products at most, we can have 99% of this early on for them.
This saves time and manual efforts. So we ensure attributes, product type, category, and its variants are done so nicely.

So, let us do this... Let us create a product in Saleor and then we will build the UI where admin goes through the pain of adding one product at a time.
============
1. **Product Name** (e.g., "Beefeater Gin")
2. **Volume** (e.g., "750ML")
3. **Product Type** (e.g., "Gin", "Whisky", "Vodka")
4. **Category** (e.g., "Spirits", "Beer", "Wine")
5. **Brand** (e.g., "Beefeater", "Johnnie Walker")
6. **Default Price** (base price for the variant)
7. **Barcode/SKU** (if available)
8. **Description** (short product description)
9. **Alcohol Percentage** (e.g., "40%")
10. **Country of Origin** (optional but useful for spirits)
11. **Image URL** (if you have product images) [UPDATE].

We map these directly to Saleor's structure:

1. **Product Type** = Saleor's ProductType
2. **Product Name + Brand** = Saleor's Product name
3. **Volume** = Main variant attribute
4. **Default Price** = Variant price in channel
5. **Alcohol Percentage** = Product attribute

BULK PRODUCT IMPORTS:


I have been tasked to build a liqour distribution platform and I did pick Saleor as the platform to build this 
... Its a B2B Liqour distribution platform. LOOKING AT SALEOR, LET US CREATE A PRODUCT TO HAVE A FEEL OF WHAT IT TAKES TO CREATE A PRODUCT WE WANT TO CREATE THEM PRODUCTS SO THAT WE CAN SAVE HOURS FOR OTHERS E.G WHOLESALERS AND RETAILERS IN THE SYSTEM WHERE WE WILL OURSELVES HAVE A SINGLE FORM THAT ADDS A SINGLE PRODUCT ....
========================


CREATING A PRODUCT IN SALEOR:
// we will be creating "ROYAL STAG 750ML" and linking it back to our channel.

üß© WHAT IS attributeCreate IN THE LIQUOR CONTEXT?
In Saleor, attributes are custom properties you define to describe a product in a structured and searchable way. 
Think of them as fields that let your system and users filter, display, or manage product variations. This becomes super important in liquor because many products share similar structure.

In Liquor:
Real World Concept	Saleor Attribute Example	Use Case
Volume (e.g. 750ML)	volume (variant-level)	Used to differentiate between same product (e.g. 375ML vs 750ML)
Alcohol % (e.g. 40%)	alcohol_percentage	Display on product detail / filter
Country of Origin	country_of_origin	Display, filter
Brand	brand (product-level)	Helps group similar products
Type (Gin, Whisky)	product_type (or mapped to category)	Filtering and navigation
‚úÖ Why You Start With attributeCreate
You must create attributes before you use them inside a productType. For example, if you want to create the product type Gin, and associate "volume" as a variant-level attribute and "alcohol percentage" as product-level attribute, those attributes must already exist in the system.

üõ†Ô∏è attributeCreate ‚Äî An Example
Let‚Äôs define a few key attributes:

mutation {
  attributeCreate(input: {
    name: "Volume"
    slug: "volume"
    type: VARIANT
    inputType: DROPDOWN
    values: [
      { name: "250ML" },
      { name: "375ML" },
      { name: "750ML" },
      { name: "1L" }
    ]
  }) {
    attribute {
      id
      name
      slug
    }
    errors {
      field
      message
    }
  }
}
type: VARIANT: Means this attribute will vary across product variants.

inputType: DROPDOWN: So you can choose from preset options (better for consistency).

values: These are the preset options available (you can also bulk import them).

Repeat for:

alcohol_percentage ‚Üí type: PRODUCT

brand ‚Üí type: PRODUCT

country_of_origin ‚Üí type: PRODUCT

üß¨ Then Comes productTypeCreate
Once your attributes exist, now you create a ProductType ‚Äî like "Spirit" or "Gin":

graphql
Copy
Edit
mutation {
  productTypeCreate(input: {
    name: "Gin"
    slug: "gin"
    hasVariants: true
    productAttributes: ["<id-of-brand>", "<id-of-alcohol-percentage>", "<id-of-country>"]
    variantAttributes: ["<id-of-volume>"]
  }) {
    productType {
      id
      name
    }
    errors {
      field
      message
    }
  }
}
productAttributes: Apply to the product globally.

variantAttributes: Define what makes variants different (like volume).

üîÅ The Process in Your SaaS Flow
You‚Äôre abstracting a lot of this complexity from the retailers ‚Äî which is perfect. Here‚Äôs your backend flow to preload liquor products for new users:

SYSTEM SEEDING FLOW:
‚úÖ Create Attributes (attributeCreate) ‚Äî Run once.

‚úÖ Create ProductTypes (productTypeCreate) ‚Äî Gin, Vodka, etc.

‚úÖ Create Categories (categoryCreate) ‚Äî Beer, Spirits, Wine, etc.

‚úÖ Create Products (productCreate) ‚Äî Like "Beefeater Gin"

‚úÖ Create Variants (productVariantCreate) ‚Äî Add volume info, price, SKU

‚úÖ Add to Channel (productChannelListingUpdate) ‚Äî So it shows up to POS

‚úÖ Sync to Meilisearch ‚Äî Instant search at POS

‚úÖ Stock it (stockCreate) ‚Äî Show stock entry per user‚Äôs warehouse

üî• Your Advantage
This is what makes your SaaS powerful: 
You prebuild a full catalog for them ‚Äî 3,000+ products with attributes, types, and variants done. Retailers only:

Set stock for their warehouse

Maybe update pricing

Maybe activate/deactivate products

All else is done.

NEXT STEPS:
Want help writing the full flow: attributeCreate ‚Üí productTypeCreate ‚Üí productCreate for "ROYAL STAG 750ML"? I can give you working Saleor GraphQL examples.

Or do you want help designing the admin form to allow product input?

Let me know what you want to do next.

===================
üòÖ For admins, especially brand owners or your internal SaaS team who seed the platform, the UI gets real complex real fast. Here's why:

ü§Ø Why Admin Product UI is Complex in a B2B Liquor SaaS:
Every product has attributes (like Alcohol %, Volume, Country).

Variants must be created for every volume (e.g., 250ML, 500ML, 750ML, 1L).

Each variant has:

its own price

its own SKU/barcode

its own channel listing (different regions might have different prices)

its own warehouse stock

Categories, Product Types, and Attributes must exist beforehand.

Images need to be uploaded or linked.

Every product must be Meilisearch-indexed to power POS.

üîß So, yes, Admins need a:
Step-by-step product builder

Step 1: Choose/Create Brand

Step 2: Choose/Create Product Type (e.g., Gin, Vodka)

Step 3: Enter core product info (name, description, alcohol %, origin)

Step 4: Add variant(s): volume + price + SKU

Step 5: Assign to channel + warehouse + stock quantity

Step 6: Upload image or link to an existing one (if deduped)

üß† Tips to Keep Admin UX Manageable:
Smart Defaults
If a brand always uses 750ML and 1L, suggest those automatically.

Templates
Let brand owners clone a previous product to skip 80% of the process.

Bulk Upload Option
Support CSV upload or Airtable-style inline editor.

Auto-mapping from Meilisearch
If Beefeater 750ML already exists, show it. Don‚Äôt duplicate ‚Äî link to it.

Visual Inventory Matrix
Like:

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Product Name ‚îÇ 250ML‚îÇ 750ML‚îÇ   1L   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Beefeater Gin‚îÇ KES  ‚îÇ KES  ‚îÇ  N/A   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚úÖ TL;DR
Yes, admin UI is complex ‚Äî but with the right UX patterns (step-by-step, smart defaults, templates, deduping), it becomes manageable, even delightful.

Want me to sketch a minimal wireframe or React UI layout for this flow?

======

mutation CreateAttribute {
  attributeCreate(input: {
    name: "Volume"
    slug: "volume_"
    type: PRODUCT_TYPE
    inputType: DROPDOWN
    values: [
      { name: "250ML" },
      { name: "750ML" },
      { name: "1L" }
    ]
  }) {
    attribute {
      id
      name
      slug
    }
    errors {
      field
      message
    }
  }
}

returns:
{
  "data": {
    "attributeCreate": {
      "attribute": {
        "id": "QXR0cmlidXRlOjU2",
        "name": "Volume",
        "slug": "volume_"
      },
      "errors": []
    }
  },
  "extensions": {
    "cost": {
      "requestedQueryCost": 0,
      "maximumAvailable": 50000
    }
  }
}


3. mutation CreateProductType {
  productTypeCreate(input: {
    name: "Beverage",
    kind: NORMAL,
    productAttributes: ["QXR0cmlidXRlOjU1"]
  }) {
    productType { id }
  }
}

-------------------------------------------------------------------------------------------------
// With search or create... we ensure our product creation never FAILS coz we reuse EXISTING categoryId and productTypeId.

4. mutation CreateProduct {
  productCreate(input: {
    name: "Premium Soda",
    productType: "UHJvZHVjdFR5cGU6NDI=",
    category: "Q2F0ZWdvcnk6MQ=="
  }) {
    product { id }
  }
}

5. mutation PublishProduct {
  productChannelListingUpdate(
    id: "UHJvZHVjdDoxNzc=",
    input: {
      updateChannels: [{
        channelId: "Q2hhbm5lbDoz",
        isPublished: true,
        visibleInListings: true,
        isAvailableForPurchase: true,
        publishedAt: "2024-03-28T00:00:00Z" # PARSE DATE IN THIS FORMAT.
      }]
    }
  ) {
    product { id }
  }
}

6. # This never ran!! returns "productVariant": null
mutation CreateVariantPrice {
  productVariantCreate(input: {
    product: "UHJvZHVjdDoxNzc=",
    sku: "SODA-001",
    # notice your version was nesting ["Bottle"] badly
    attributes: [{
      id: "QXR0cmlidXRlOjU1", 
      values: ["Bottle"],#Bottle exists!
    }]
    stocks: [{
      warehouse: "V2FyZWhvdXNlOjVhZmVlYWJjLWNjODMtNDUzNy1hY2IyLWRkNDRhNjJjOTc2Mg==",
      quantity: 100
    }]
  }) {
    productVariant { id }
  }
}

# This one ran and retuned the id as UHJvZHVjdFZhcmlhbnQ6NDA1
mutation SetVariantPrice {
  productVariantChannelListingUpdate(
    id: "UHJvZHVjdFZhcmlhbnQ6NDA1",
    input: [{channelId: "Q2hhbm5lbDoz", price: "350.00"}]
  ) {
    variant { id }
  }
}
