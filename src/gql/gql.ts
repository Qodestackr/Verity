/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment BusinessCustomer on User {\n  id\n  email\n  firstName\n  lastName\n  isActive\n  metadata {\n    key\n    value\n  }\n  addresses {\n    id\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n    isDefaultShippingAddress\n    isDefaultBillingAddress\n  }\n}\n\nfragment ChannelInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}": typeof types.BusinessCustomerFragmentDoc,
    "fragment ChannelBasicData on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelErrors on ChannelError {\n  field\n  message\n  code\n  shippingZones\n  warehouses\n}\n\nfragment ChannelWithWarehouses on Channel {\n  ...ChannelBasicData\n  warehouses {\n    id\n    name\n    slug\n  }\n}\n\nfragment ChannelWithSettings on Channel {\n  ...ChannelBasicData\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n}\n\nfragment ChannelBasicInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelDetailedInfo on Channel {\n  ...ChannelBasicInfo\n  hasOrders\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n  warehouses {\n    id\n    name\n    slug\n  }\n  countries {\n    code\n    country\n  }\n}": typeof types.ChannelBasicDataFragmentDoc,
    "fragment CheckoutErrorFragment on CheckoutError {\n  message\n  field\n  code\n}\n\nfragment GiftCardFragment on GiftCard {\n  displayCode\n  id\n  currentBalance {\n    ...Money\n  }\n}\n\nfragment ValidationRulesFragment on AddressValidationData {\n  addressFormat\n  allowedFields\n  requiredFields\n  countryAreaType\n  postalCodeType\n  cityType\n  countryAreaChoices {\n    raw\n    verbose\n  }\n}\n\nfragment PaymentGatewayFragment on PaymentGateway {\n  id\n  name\n  currencies\n  config {\n    field\n    value\n  }\n}\n\nfragment CheckoutFragment on Checkout {\n  id\n  email\n  discount {\n    ...Money\n  }\n  voucherCode\n  discountName\n  translatedDiscountName\n  giftCards {\n    ...GiftCardFragment\n  }\n  channel {\n    id\n    slug\n  }\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  authorizeStatus\n  chargeStatus\n  isShippingRequired\n  user {\n    id\n    email\n  }\n  availablePaymentGateways {\n    ...PaymentGatewayFragment\n  }\n  deliveryMethod {\n    ... on ShippingMethod {\n      id\n    }\n    ... on Warehouse {\n      id\n    }\n  }\n  shippingMethods {\n    id\n    name\n    price {\n      ...Money\n    }\n    maximumDeliveryDays\n    minimumDeliveryDays\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotalPrice {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...CheckoutLineFragment\n  }\n}\n\nfragment CheckoutLineFragment on CheckoutLine {\n  id\n  quantity\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    ...Money\n  }\n  variant {\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n    id\n    name\n    translation(languageCode: $languageCode) {\n      name\n    }\n    product {\n      name\n      translation(languageCode: $languageCode) {\n        language {\n          code\n        }\n        id\n        name\n      }\n      media {\n        alt\n        type\n        url(size: 72)\n      }\n    }\n    media {\n      alt\n      type\n      url(size: 72)\n    }\n  }\n}\n\nfragment AddressFragment on Address {\n  id\n  city\n  phone\n  postalCode\n  companyName\n  cityArea\n  streetAddress1\n  streetAddress2\n  countryArea\n  country {\n    country\n    code\n  }\n  firstName\n  lastName\n}": typeof types.CheckoutErrorFragmentFragmentDoc,
    "fragment StockBasic on Stock {\n  id\n  warehouse {\n    id\n    name\n  }\n  quantity\n  quantityAllocated\n  quantityReserved\n}\n\nfragment ProductInventory on Product {\n  id\n  name\n  variants {\n    id\n    sku\n    name\n    quantityAvailable\n    stocks {\n      ...StockBasic\n    }\n  }\n}\n\nfragment WarehouseBasic on Warehouse {\n  id\n  name\n  email\n  isPrivate\n  slug\n}\n\nfragment WarehouseDetails on Warehouse {\n  ...WarehouseBasic\n  address {\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    countryArea\n    phone\n  }\n  metadata {\n    key\n    value\n  }\n}": typeof types.StockBasicFragmentDoc,
    "fragment OrderCreatedWebhookPayload on OrderCreated {\n  order {\n    userEmail\n    id\n    number\n    user {\n      email\n      firstName\n      lastName\n    }\n  }\n}": typeof types.OrderCreatedWebhookPayloadFragmentDoc,
    "fragment Money on Money {\n  currency\n  amount\n}\n\nfragment OrderLineFragment on OrderLine {\n  id\n  quantity\n  variant {\n    name\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  productName\n  variantName\n  thumbnail(size: 128, format: WEBP) {\n    alt\n    url\n  }\n}\n\nfragment ShippingFragment on ShippingMethod {\n  name\n  minimumDeliveryDays\n  maximumDeliveryDays\n}\n\nfragment OrderFragment on Order {\n  id\n  number\n  status\n  created\n  userEmail\n  isPaid\n  discounts {\n    type\n    name\n    amount {\n      ...Money\n    }\n  }\n  chargeStatus\n  authorizeStatus\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  deliveryMethod {\n    ...ShippingFragment\n  }\n  total {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  voucher {\n    code\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...OrderLineFragment\n  }\n  totalBalance {\n    ...Money\n  }\n  totalCaptured {\n    ...Money\n  }\n}\n\nfragment OrderBasic on Order {\n  id\n  number\n  created\n  status\n  total {\n    gross {\n      ...Money\n    }\n  }\n}\n\nfragment OrderDetails on Order {\n  ...OrderBasic\n  shippingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  billingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  userEmail\n  lines {\n    id\n    productName\n    variantName\n    quantity\n    unitPrice {\n      gross {\n        ...Money\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  paymentStatus\n}\n\nfragment OrderFulfillment on Order {\n  id\n  number\n  fulfillments {\n    id\n    status\n    trackingNumber\n    created\n    lines {\n      id\n      quantity\n      orderLine {\n        id\n        productName\n        variantName\n      }\n    }\n  }\n}": typeof types.MoneyFragmentDoc,
    "fragment ProductBasic on Product {\n  id\n  name\n  slug\n  description\n  thumbnail {\n    url\n    alt\n  }\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n}\n\nfragment VariantDetails on ProductVariant {\n  id\n  name\n  sku\n  quantityAvailable\n  channelListings {\n    costPrice {\n      ...Money\n    }\n  }\n  pricing {\n    price {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nfragment ProductDetails on Product {\n  ...ProductBasic\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n    discount {\n      gross {\n        ...Money\n      }\n    }\n  }\n  isAvailable\n  variants {\n    ...VariantDetails\n  }\n  metadata {\n    key\n    value\n  }\n}\n\nfragment ProductListItem on Product {\n  id\n  name\n  slug\n  variants {\n    ...VariantDetails\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n  category {\n    id\n    name\n  }\n  thumbnail(size: 1024, format: WEBP) {\n    url\n    alt\n  }\n}\n\nfragment AttributeBulkCreateError on AttributeBulkCreateError {\n  code\n  message\n  path\n}\n\nfragment ProductError on ProductError {\n  code\n  message\n  field\n}": typeof types.ProductBasicFragmentDoc,
    "fragment PromotionFragment on Promotion {\n  id\n  name\n  type\n  description\n  startDate\n  endDate\n}\n\nfragment PromotionRuleFragment on PromotionRule {\n  id\n  name\n  description\n  promotion {\n    id\n  }\n  channels {\n    id\n    name\n  }\n  rewardValueType\n  rewardValue\n  cataloguePredicate\n  orderPredicate\n}": typeof types.PromotionFragmentFragmentDoc,
    "fragment ShippingZoneDetails on ShippingZone {\n  id\n  name\n  description\n  default\n  countries {\n    code\n    country\n  }\n  warehouses {\n    id\n    name\n  }\n  channels {\n    id\n    name\n  }\n}\n\nfragment ShippingZoneError on ShippingError {\n  field\n  code\n  message\n  warehouses\n  channels\n}": typeof types.ShippingZoneDetailsFragmentDoc,
    "mutation CreateToken($email: String!, $password: String!) {\n  tokenCreate(email: $email, password: $password) {\n    token\n    user {\n      id\n      email\n      isStaff\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation WebhookCreate($input: WebhookCreateInput!) {\n  webhookCreate(input: $input) {\n    webhook {\n      id\n      name\n      isActive\n      targetUrl\n      asyncEvents {\n        name\n        eventType\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation AppCreate {\n  appCreate(\n    input: {name: \"SaaS_WRAPPER_APP\", permissions: [MANAGE_ORDERS, MANAGE_PRODUCTS, MANAGE_USERS, MANAGE_STAFF]}\n  ) {\n    app {\n      id\n      tokens {\n        authToken\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}": typeof types.CreateTokenDocument,
    "mutation CreateChannel($input: ChannelCreateInput!) {\n  channelCreate(input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannel($id: ID!, $input: ChannelUpdateInput!) {\n  channelUpdate(id: $id, input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeleteChannel($id: ID!, $input: ChannelDeleteInput) {\n  channelDelete(id: $id, input: $input) {\n    channel {\n      id\n      name\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ActivateChannel($id: ID!) {\n  channelActivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeactivateChannel($id: ID!) {\n  channelDeactivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation AddWarehousesToChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation RemoveWarehousesFromChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {removeWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ReorderChannelWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n  channelReorderWarehouses(channelId: $channelId, moves: $moves) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelOrderSettings($channelId: ID!, $input: OrderSettingsInput!) {\n  channelUpdate(id: $channelId, input: {orderSettings: $input}) {\n    channel {\n      id\n      orderSettings {\n        allowUnpaidOrders\n        automaticallyConfirmAllNewOrders\n        automaticallyFulfillNonShippableGiftCard\n        expireOrdersAfter\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelStockSettings($channelId: ID!, $input: StockSettingsInput!) {\n  channelUpdate(id: $channelId, input: {stockSettings: $input}) {\n    channel {\n      id\n      stockSettings {\n        allocationStrategy\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}": typeof types.CreateChannelDocument,
    "mutation CheckoutCreate($channel: String!, $lines: [CheckoutLineInput!]!) {\n  checkoutCreate(input: {channel: $channel, lines: $lines}) {\n    checkout {\n      id\n      email\n      lines {\n        id\n        quantity\n        totalPrice {\n          gross {\n            ...Money\n          }\n        }\n        variant {\n          product {\n            id\n            name\n            slug\n            thumbnail {\n              url\n              alt\n            }\n            category {\n              name\n            }\n          }\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          name\n          id\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation CheckoutAddLine($id: ID!, $productVariantId: ID!) {\n  checkoutLinesAdd(id: $id, lines: [{quantity: 1, variantId: $productVariantId}]) {\n    checkout {\n      id\n      lines {\n        id\n        quantity\n        variant {\n          name\n          product {\n            name\n          }\n        }\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CheckoutDeleteLines($checkoutId: ID!, $lineIds: [ID!]!) {\n  checkoutLinesDelete(id: $checkoutId, linesIds: $lineIds) {\n    checkout {\n      id\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation checkoutLinesUpdate($checkoutId: ID!, $lines: [CheckoutLineUpdateInput!]!, $languageCode: LanguageCodeEnum!) {\n  checkoutLinesUpdate(id: $checkoutId, lines: $lines) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutLineDelete($checkoutId: ID!, $lineId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutLineDelete(id: $checkoutId, lineId: $lineId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutEmailUpdate($email: String!, $checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutEmailUpdate(email: $email, id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutCustomerAttach($checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutCustomerAttach(id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutShippingAddressUpdate($checkoutId: ID!, $shippingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutShippingAddressUpdate(\n    id: $checkoutId\n    shippingAddress: $shippingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutBillingAddressUpdate($checkoutId: ID!, $billingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutBillingAddressUpdate(\n    id: $checkoutId\n    billingAddress: $billingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutDeliveryMethodUpdate($checkoutId: ID!, $deliveryMethodId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutDeliveryMethodUpdate(\n    id: $checkoutId\n    deliveryMethodId: $deliveryMethodId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutAddPromoCode($checkoutId: ID, $promoCode: String!, $languageCode: LanguageCodeEnum!) {\n  checkoutAddPromoCode(checkoutId: $checkoutId, promoCode: $promoCode) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutRemovePromoCode($checkoutId: ID, $promoCode: String, $promoCodeId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutRemovePromoCode(\n    checkoutId: $checkoutId\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutComplete($checkoutId: ID!) {\n  checkoutComplete(id: $checkoutId) {\n    order {\n      id\n      number\n      total {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      ...CheckoutErrorFragment\n    }\n  }\n}": typeof types.CheckoutCreateDocument,
    "mutation CreateWarehouse($input: WarehouseCreateInput!) {\n  createWarehouse(input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation UpdateWarehouse($id: ID!, $input: WarehouseUpdateInput!) {\n  updateWarehouse(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation ChannelUpdateWarehouses($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      id\n      name\n      warehouses {\n        id\n        name\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DeleteWarehouse($id: ID!) {\n  deleteWarehouse(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProductVariant($id: ID!, $input: ProductVariantInput!) {\n  productVariantUpdate(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    productVariant {\n      id\n      name\n      sku\n    }\n  }\n}\n\nmutation CreateAlcoraCategory {\n  categoryCreate(\n    input: {name: \"Alcora Admin Products\", slug: \"alcoraadmin\", description: \"\"}\n  ) {\n    category {\n      id\n      name\n      slug\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": typeof types.CreateWarehouseDocument,
    "mutation ConfirmOrder($id: ID!) {\n  orderConfirm(id: $id) {\n    order {\n      status\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation FulfillOrder($order: ID!, $input: OrderFulfillInput!) {\n  orderFulfill(order: $order, input: $input) {\n    order {\n      id\n      status\n    }\n    fulfillments {\n      id\n    }\n    errors {\n      field\n      message\n    }\n  }\n}": typeof types.ConfirmOrderDocument,
    "mutation paymentGatewaysInitialize($checkoutId: ID!, $paymentGateways: [PaymentGatewayToInitialize!]) {\n  paymentGatewayInitialize(id: $checkoutId, paymentGateways: $paymentGateways) {\n    errors {\n      field\n      message\n      code\n    }\n    gatewayConfigs {\n      id\n      data\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n}\n\nmutation transactionInitialize($checkoutId: ID!, $action: TransactionFlowStrategyEnum, $paymentGateway: PaymentGatewayToInitialize!, $amount: PositiveDecimal) {\n  transactionInitialize(\n    id: $checkoutId\n    action: $action\n    paymentGateway: $paymentGateway\n    amount: $amount\n  ) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation transactionProcess($id: ID!, $data: JSON) {\n  transactionProcess(id: $id, data: $data) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation CheckoutPaymentCreate($checkoutId: ID!, $input: PaymentInput!) {\n  checkoutPaymentCreate(checkoutId: $checkoutId, input: $input) {\n    checkout {\n      id\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    payment {\n      id\n      gateway\n      token\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": typeof types.PaymentGatewaysInitializeDocument,
    "mutation CreateProductAttributes($attributes: [AttributeCreateInput!]!) {\n  attributeBulkCreate(attributes: $attributes) {\n    results {\n      attribute {\n        id\n        name\n        slug\n      }\n      errors {\n        ...AttributeBulkCreateError\n      }\n    }\n  }\n}\n\nmutation CreateProductType($name: String!, $slug: String!, $productAttributes: [ID!]!, $variantAttributes: [ID!]!, $kind: ProductTypeKindEnum!, $isShippingRequired: Boolean!) {\n  productTypeCreate(\n    input: {name: $name, slug: $slug, kind: $kind, isShippingRequired: $isShippingRequired, hasVariants: true, productAttributes: $productAttributes, variantAttributes: $variantAttributes}\n  ) {\n    productType {\n      id\n      name\n      productAttributes {\n        id\n        name\n      }\n      variantAttributes {\n        id\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation CreateProduct($input: ProductCreateInput!) {\n  productCreate(input: $input) {\n    product {\n      id\n      name\n      slug\n      variants {\n        id\n        sku\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation PublishProductToChannel($productId: ID!, $channelId: ID!) {\n  productChannelListingUpdate(\n    id: $productId\n    input: {updateChannels: [{channelId: $channelId, isPublished: true, isAvailableForPurchase: true, visibleInListings: true}]}\n  ) {\n    product {\n      id\n      name\n      channelListings {\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n    }\n    errors {\n      code\n      message\n      field\n    }\n  }\n}\n\nmutation CreateProductVariant($input: ProductVariantCreateInput!) {\n  productVariantCreate(input: $input) {\n    productVariant {\n      id\n      sku\n      name\n      pricing {\n        price {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation SetProductVariantPrice($id: ID!, $input: [ProductVariantChannelListingAddInput!]!) {\n  productVariantChannelListingUpdate(id: $id, input: $input) {\n    variant {\n      id\n      channelListings {\n        channel {\n          name\n        }\n        price {\n          amount\n          currency\n        }\n        costPrice {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProduct($id: ID!, $input: ProductInput!) {\n  productUpdate(id: $id, input: $input) {\n    product {\n      id\n      name\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": typeof types.CreateProductAttributesDocument,
    "mutation PromotionCreate($input: PromotionCreateInput!) {\n  promotionCreate(input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleCreate($input: PromotionRuleCreateInput!) {\n  promotionRuleCreate(input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionUpdate($id: ID!, $input: PromotionUpdateInput!) {\n  promotionUpdate(id: $id, input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleUpdate($id: ID!, $input: PromotionRuleUpdateInput!) {\n  promotionRuleUpdate(id: $id, input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionDelete($id: ID!) {\n  promotionDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleDelete($id: ID!) {\n  promotionRuleDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}": typeof types.PromotionCreateDocument,
    "mutation ShippingZoneCreate($input: ShippingZoneCreateInput!) {\n  shippingZoneCreate(input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}\n\nmutation ShippingZoneUpdate($id: ID!, $input: ShippingZoneUpdateInput!) {\n  shippingZoneUpdate(id: $id, input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}": typeof types.ShippingZoneCreateDocument,
    "mutation UpdateStock($variantId: ID!, $warehouseId: ID!, $quantity: Int!) {\n  productVariantStocksUpdate(\n    variantId: $variantId\n    stocks: [{warehouse: $warehouseId, quantity: $quantity}]\n  ) {\n    productVariant {\n      stocks {\n        warehouse {\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CreateStock($variantId: ID!, $input: [StockInput!]!) {\n  productVariantStocksCreate(variantId: $variantId, stocks: $input) {\n    productVariant {\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}\n\nmutation DeleteProduct($productId: ID!) {\n  productDelete(id: $productId) {\n    errors {\n      message\n    }\n  }\n}": typeof types.UpdateStockDocument,
    "mutation DraftOrderCreate($input: DraftOrderCreateInput!) {\n  draftOrderCreate(input: $input) {\n    order {\n      id\n      token\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n  draftOrderUpdate(id: $id, input: $input) {\n    order {\n      id\n      number\n      status\n      userEmail\n      customerNote\n      status\n      isPaid\n      lines {\n        variant {\n          id\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLinesCreate($id: ID!, $lines: [OrderLineCreateInput!]!) {\n  orderLinesCreate(id: $id, input: $lines) {\n    order {\n      id\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLineDelete($lineId: ID!) {\n  orderLineDelete(id: $lineId) {\n    order {\n      id\n      number\n      status\n    }\n    orderLine {\n      id\n      productName\n      quantity\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation OrderCreateFromDraftOrder($id: ID!) {\n  draftOrderComplete(id: $id) {\n    order {\n      id\n      status\n      number\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation DraftOrderDelete($id: ID!) {\n  draftOrderDelete(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": typeof types.DraftOrderCreateDocument,
    "query GetApps($first: Int = 10) {\n  apps(first: $first) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}": typeof types.GetAppsDocument,
    "query GetChannelById($id: ID!) {\n  channel(id: $id) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery GetChannelBySlug($slug: String!) {\n  channel(slug: $slug) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery ListChannels {\n  channels {\n    ...ChannelBasicInfo\n  }\n}\n\nquery GetChannelWithWarehouses($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    warehouses {\n      id\n      name\n      slug\n      address {\n        streetAddress1\n        streetAddress2\n        city\n        country {\n          code\n          country\n        }\n      }\n    }\n  }\n}\n\nquery GetChannelWithShippingZones($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    availableShippingMethodsPerCountry {\n      countryCode\n      shippingMethods {\n        id\n        name\n        minimumOrderPrice {\n          ...Money\n        }\n        maximumOrderPrice {\n          ...Money\n        }\n        minimumOrderWeight {\n          unit\n          value\n        }\n        maximumOrderWeight {\n          unit\n          value\n        }\n      }\n    }\n  }\n}\n\nquery GetShippingMethods {\n  checkout(id: \"Q2hlY2tvdXQ6YjcwZWFiZGEtMTZiNi00MzY0LThkYWUtODRiNzJhYzc2MzVi\") {\n    availableShippingMethods {\n      id\n      name\n      price {\n        amount\n        currency\n      }\n    }\n    shippingMethods {\n      id\n      name\n    }\n  }\n}\n\nquery GetChannelStockSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    stockSettings {\n      allocationStrategy\n    }\n    warehouses {\n      id\n      name\n      slug\n    }\n  }\n}\n\nquery GetChannelOrderSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    orderSettings {\n      allowUnpaidOrders\n      automaticallyConfirmAllNewOrders\n      automaticallyFulfillNonShippableGiftCard\n      expireOrdersAfter\n    }\n  }\n}\n\nquery CheckProductInChannel($productId: ID!, $channelSlug: String!) {\n  product(id: $productId, channel: $channelSlug) {\n    id\n    name\n    isAvailableForPurchase\n    isAvailable\n    channelListings {\n      channel {\n        id\n        slug\n      }\n      isPublished\n      visibleInListings\n      publishedAt\n      availableForPurchaseAt\n    }\n    variants {\n      id\n      name\n      sku\n      channelListings {\n        channel {\n          id\n          slug\n        }\n        price {\n          ...Money\n        }\n        costPrice {\n          ...Money\n        }\n        preorderThreshold {\n          quantity\n        }\n      }\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n        quantityAllocated\n      }\n    }\n  }\n}\n\nquery ListProductsInChannel($channelSlug: String!, $first: Int = 100, $after: String, $filter: ProductFilterInput) {\n  products(channel: $channelSlug, first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        thumbnail {\n          url\n          alt\n        }\n        category {\n          id\n          name\n        }\n        channelListings {\n          channel {\n            id\n            slug\n          }\n          isPublished\n          visibleInListings\n        }\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetLowStockProductsInChannel($channelSlug: String!, $threshold: Int = 10, $first: Int = 100) {\n  products(channel: $channelSlug, first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}": typeof types.GetChannelByIdDocument,
    "query CheckoutFind($id: ID!) {\n  checkout(id: $id) {\n    id\n    email\n    lines {\n      id\n      quantity\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n      variant {\n        product {\n          id\n          name\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            name\n          }\n        }\n        pricing {\n          price {\n            gross {\n              ...Money\n            }\n          }\n        }\n        name\n        id\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nquery checkout($id: ID!, $languageCode: LanguageCodeEnum!) {\n  checkout(id: $id) {\n    ...CheckoutFragment\n  }\n}\n\nquery channel($slug: String!) {\n  channel(slug: $slug) {\n    countries {\n      code\n    }\n  }\n}\n\nquery addressValidationRules($countryCode: CountryCode!) {\n  addressValidationRules(countryCode: $countryCode) {\n    ...ValidationRulesFragment\n  }\n}": typeof types.CheckoutFindDocument,
    "query ProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery ProductsInventory($first: Int = 50, $after: String, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        productType {\n          id\n          name\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n        variants {\n          id\n          name\n          sku\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          stocks {\n            ...StockBasic\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery LowStockProducts($threshold: Int = 10, $first: Int = 100) {\n  products(first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery Warehouses($first: Int = 100) {\n  warehouses(first: $first) {\n    edges {\n      node {\n        ...WarehouseDetails\n      }\n    }\n  }\n}\n\nquery ChannelWarehouses($channelId: ID!) {\n  channel(id: $channelId) {\n    id\n    warehouses {\n      id\n      name\n    }\n  }\n}\n\nquery WarehouseStock($id: ID!, $first: Int = 100) {\n  warehouse(id: $id) {\n    ...WarehouseBasic\n    stocks(first: $first) {\n      edges {\n        node {\n          id\n          productVariant {\n            id\n            name\n            sku\n          }\n          quantity\n          quantityAllocated\n        }\n      }\n    }\n  }\n}\n\nquery GetInventory($channel: String!, $first: Int, $after: String) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          quantityAvailable\n          quantityOrdered\n          margin\n          quantityLimitPerCustomer\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": typeof types.ProductInventoryDocument,
    "query order($id: ID!, $languageCode: LanguageCodeEnum!) {\n  order(id: $id) {\n    ...OrderFragment\n  }\n}\n\nquery FindOrder($id: ID!) {\n  order(id: $id) {\n    ...OrderBasic\n    lines {\n      id\n      variant {\n        id\n      }\n      productName\n      quantity\n      unitPrice {\n        gross {\n          ...Money\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    shippingAddress {\n      firstName\n      lastName\n      streetAddress1\n      city\n      country {\n        code\n      }\n    }\n  }\n}\n\nquery GetOrdersByStatus($status: [OrderStatusFilter!]!, $first: Int!) {\n  orders(first: $first, filter: {status: $status}) {\n    edges {\n      node {\n        id\n        status\n        userEmail\n        created\n        number\n        total {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOrderFulfillment($id: ID!) {\n  order(id: $id) {\n    ...OrderFulfillment\n  }\n}\n\nquery GetOrdersByChannel($channel: String!, $first: Int, $filter: OrderFilterInput) {\n  orders(channel: $channel, first: $first, filter: $filter) {\n    edges {\n      node {\n        id\n        number\n        status\n        created\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n}": typeof types.OrderDocument,
    "query ProductList($first: Int = 9, $channel: String!) {\n  products(first: $first, channel: $channel) {\n    edges {\n      node {\n        productType {\n          id\n          name\n        }\n        ...ProductListItem\n      }\n    }\n  }\n}\n\nquery GetProducts($first: Int!, $after: String, $channel: String!, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, channel: $channel, filter: $filter) {\n    edges {\n      node {\n        ...ProductBasic\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductDetails($id: ID!, $channel: String!) {\n  product(id: $id, channel: $channel) {\n    ...ProductDetails\n  }\n}\n\nquery SearchProductsBasic($search: String!, $first: Int!, $channel: String!) {\n  products(first: $first, filter: {search: $search}, channel: $channel) {\n    edges {\n      node {\n        ...ProductBasic\n        variants {\n          id\n          name\n          sku\n        }\n      }\n    }\n  }\n}\n\nquery GetProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery GetAllCategories {\n  categories(first: 50) {\n    edges {\n      node {\n        id\n        name\n        slug\n      }\n    }\n  }\n}\n\nquery GetProductsByCategory($categoryId: ID!) {\n  category(id: $categoryId) {\n    id\n    name\n    products(first: 100, channel: \"Q2hhbm5lbDoz\") {\n      edges {\n        node {\n          ...ProductBasic\n        }\n      }\n    }\n  }\n}\n\nquery ProductListByCategory($slug: String!, $channel: String!) {\n  category(slug: $slug) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100, channel: $channel) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetCategories($first: Int!) {\n  categories(first: $first) {\n    edges {\n      node {\n        id\n        name\n        slug\n        products(first: $first) {\n          totalCount\n        }\n      }\n    }\n  }\n}\n\nquery SearchProductsSorted($search: String!, $sortBy: ProductOrderField!, $sortDirection: OrderDirection!, $first: Int!, $after: String, $channel: String!) {\n  products(\n    first: $first\n    after: $after\n    channel: $channel\n    sortBy: {field: $sortBy, direction: $sortDirection}\n    filter: {search: $search}\n  ) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListPaginated($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListByCollection($slug: String!, $channel: String!) {\n  collection(slug: $slug, channel: $channel) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetProductTypeBySlug($slug: String!) {\n  productTypes(filter: {search: $slug}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        productAttributes {\n          id\n          name\n        }\n        variantAttributes {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nquery GetAttributeBySlug($slug: String!) {\n  attributes(filter: {slugs: [$slug]}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        inputType\n        type\n      }\n    }\n  }\n}\n\nquery GetProductsForMeiliSearch($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        slug\n        variants {\n          id\n          name\n          sku\n          quantityAvailable\n          channelListings {\n            costPrice {\n              currency\n              amount\n            }\n          }\n          pricing {\n            price {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        pricing {\n          priceRange {\n            start {\n              gross {\n                currency\n                amount\n              }\n            }\n            stop {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductBySlug($slug: String!) {\n  product(slug: $slug) {\n    id\n    name\n    slug\n    variants {\n      id\n      name\n      sku\n    }\n  }\n}": typeof types.ProductListDocument,
    "query Promotions($first: Int, $after: String) {\n  promotions(first: $first, after: $after) {\n    edges {\n      node {\n        ...PromotionFragment\n        rules {\n          id\n          name\n          rewardValueType\n          rewardValue\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery Promotion($id: ID!) {\n  promotion(id: $id) {\n    ...PromotionFragment\n    rules {\n      ...PromotionRuleFragment\n    }\n    events {\n      ... on PromotionEventInterface {\n        type\n        date\n        createdBy {\n          ... on User {\n            id\n            email\n          }\n        }\n      }\n      ... on PromotionRuleEventInterface {\n        ruleId\n      }\n    }\n  }\n}": typeof types.PromotionsDocument,
    "query CheckStock($productId: ID!) {\n  product(id: $productId) {\n    name\n    variants {\n      sku\n      attributes {\n        attribute {\n          id\n          name\n        }\n        values {\n          id\n          name\n        }\n      }\n      stocks {\n        quantity\n        warehouse {\n          name\n        }\n      }\n    }\n    channelListings {\n      channel {\n        name\n      }\n    }\n  }\n}": typeof types.CheckStockDocument,
    "query DraftOrderDetails($id: ID!) {\n  order(id: $id) {\n    id\n    token\n    created\n    status\n    number\n    userEmail\n    customerNote\n    shippingAddress {\n      firstName\n      lastName\n      phone\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    subtotal {\n      gross {\n        amount\n        currency\n      }\n    }\n    lines {\n      id\n      productName\n      variantName\n      quantity\n      unitPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      variant {\n        id\n        product {\n          id\n          name\n        }\n      }\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    metadata {\n      key\n      value\n    }\n    privateMetadata {\n      key\n      value\n    }\n  }\n}\n\nquery DraftOrders($first: Int!, $after: String) {\n  draftOrders(first: $first, after: $after) {\n    edges {\n      node {\n        id\n        created\n        status\n        number\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n        lines {\n          id\n          productName\n          quantity\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": typeof types.DraftOrderDetailsDocument,
    "subscription OrderUpdated {\n  orderUpdated {\n    order {\n      id\n      status\n    }\n  }\n}\n\nsubscription OrderCreatedSubscription {\n  event {\n    ...OrderCreatedWebhookPayload\n  }\n}": typeof types.OrderUpdatedDocument,
};
const documents: Documents = {
    "fragment BusinessCustomer on User {\n  id\n  email\n  firstName\n  lastName\n  isActive\n  metadata {\n    key\n    value\n  }\n  addresses {\n    id\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n    isDefaultShippingAddress\n    isDefaultBillingAddress\n  }\n}\n\nfragment ChannelInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}": types.BusinessCustomerFragmentDoc,
    "fragment ChannelBasicData on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelErrors on ChannelError {\n  field\n  message\n  code\n  shippingZones\n  warehouses\n}\n\nfragment ChannelWithWarehouses on Channel {\n  ...ChannelBasicData\n  warehouses {\n    id\n    name\n    slug\n  }\n}\n\nfragment ChannelWithSettings on Channel {\n  ...ChannelBasicData\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n}\n\nfragment ChannelBasicInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelDetailedInfo on Channel {\n  ...ChannelBasicInfo\n  hasOrders\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n  warehouses {\n    id\n    name\n    slug\n  }\n  countries {\n    code\n    country\n  }\n}": types.ChannelBasicDataFragmentDoc,
    "fragment CheckoutErrorFragment on CheckoutError {\n  message\n  field\n  code\n}\n\nfragment GiftCardFragment on GiftCard {\n  displayCode\n  id\n  currentBalance {\n    ...Money\n  }\n}\n\nfragment ValidationRulesFragment on AddressValidationData {\n  addressFormat\n  allowedFields\n  requiredFields\n  countryAreaType\n  postalCodeType\n  cityType\n  countryAreaChoices {\n    raw\n    verbose\n  }\n}\n\nfragment PaymentGatewayFragment on PaymentGateway {\n  id\n  name\n  currencies\n  config {\n    field\n    value\n  }\n}\n\nfragment CheckoutFragment on Checkout {\n  id\n  email\n  discount {\n    ...Money\n  }\n  voucherCode\n  discountName\n  translatedDiscountName\n  giftCards {\n    ...GiftCardFragment\n  }\n  channel {\n    id\n    slug\n  }\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  authorizeStatus\n  chargeStatus\n  isShippingRequired\n  user {\n    id\n    email\n  }\n  availablePaymentGateways {\n    ...PaymentGatewayFragment\n  }\n  deliveryMethod {\n    ... on ShippingMethod {\n      id\n    }\n    ... on Warehouse {\n      id\n    }\n  }\n  shippingMethods {\n    id\n    name\n    price {\n      ...Money\n    }\n    maximumDeliveryDays\n    minimumDeliveryDays\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotalPrice {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...CheckoutLineFragment\n  }\n}\n\nfragment CheckoutLineFragment on CheckoutLine {\n  id\n  quantity\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    ...Money\n  }\n  variant {\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n    id\n    name\n    translation(languageCode: $languageCode) {\n      name\n    }\n    product {\n      name\n      translation(languageCode: $languageCode) {\n        language {\n          code\n        }\n        id\n        name\n      }\n      media {\n        alt\n        type\n        url(size: 72)\n      }\n    }\n    media {\n      alt\n      type\n      url(size: 72)\n    }\n  }\n}\n\nfragment AddressFragment on Address {\n  id\n  city\n  phone\n  postalCode\n  companyName\n  cityArea\n  streetAddress1\n  streetAddress2\n  countryArea\n  country {\n    country\n    code\n  }\n  firstName\n  lastName\n}": types.CheckoutErrorFragmentFragmentDoc,
    "fragment StockBasic on Stock {\n  id\n  warehouse {\n    id\n    name\n  }\n  quantity\n  quantityAllocated\n  quantityReserved\n}\n\nfragment ProductInventory on Product {\n  id\n  name\n  variants {\n    id\n    sku\n    name\n    quantityAvailable\n    stocks {\n      ...StockBasic\n    }\n  }\n}\n\nfragment WarehouseBasic on Warehouse {\n  id\n  name\n  email\n  isPrivate\n  slug\n}\n\nfragment WarehouseDetails on Warehouse {\n  ...WarehouseBasic\n  address {\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    countryArea\n    phone\n  }\n  metadata {\n    key\n    value\n  }\n}": types.StockBasicFragmentDoc,
    "fragment OrderCreatedWebhookPayload on OrderCreated {\n  order {\n    userEmail\n    id\n    number\n    user {\n      email\n      firstName\n      lastName\n    }\n  }\n}": types.OrderCreatedWebhookPayloadFragmentDoc,
    "fragment Money on Money {\n  currency\n  amount\n}\n\nfragment OrderLineFragment on OrderLine {\n  id\n  quantity\n  variant {\n    name\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  productName\n  variantName\n  thumbnail(size: 128, format: WEBP) {\n    alt\n    url\n  }\n}\n\nfragment ShippingFragment on ShippingMethod {\n  name\n  minimumDeliveryDays\n  maximumDeliveryDays\n}\n\nfragment OrderFragment on Order {\n  id\n  number\n  status\n  created\n  userEmail\n  isPaid\n  discounts {\n    type\n    name\n    amount {\n      ...Money\n    }\n  }\n  chargeStatus\n  authorizeStatus\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  deliveryMethod {\n    ...ShippingFragment\n  }\n  total {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  voucher {\n    code\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...OrderLineFragment\n  }\n  totalBalance {\n    ...Money\n  }\n  totalCaptured {\n    ...Money\n  }\n}\n\nfragment OrderBasic on Order {\n  id\n  number\n  created\n  status\n  total {\n    gross {\n      ...Money\n    }\n  }\n}\n\nfragment OrderDetails on Order {\n  ...OrderBasic\n  shippingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  billingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  userEmail\n  lines {\n    id\n    productName\n    variantName\n    quantity\n    unitPrice {\n      gross {\n        ...Money\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  paymentStatus\n}\n\nfragment OrderFulfillment on Order {\n  id\n  number\n  fulfillments {\n    id\n    status\n    trackingNumber\n    created\n    lines {\n      id\n      quantity\n      orderLine {\n        id\n        productName\n        variantName\n      }\n    }\n  }\n}": types.MoneyFragmentDoc,
    "fragment ProductBasic on Product {\n  id\n  name\n  slug\n  description\n  thumbnail {\n    url\n    alt\n  }\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n}\n\nfragment VariantDetails on ProductVariant {\n  id\n  name\n  sku\n  quantityAvailable\n  channelListings {\n    costPrice {\n      ...Money\n    }\n  }\n  pricing {\n    price {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nfragment ProductDetails on Product {\n  ...ProductBasic\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n    discount {\n      gross {\n        ...Money\n      }\n    }\n  }\n  isAvailable\n  variants {\n    ...VariantDetails\n  }\n  metadata {\n    key\n    value\n  }\n}\n\nfragment ProductListItem on Product {\n  id\n  name\n  slug\n  variants {\n    ...VariantDetails\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n  category {\n    id\n    name\n  }\n  thumbnail(size: 1024, format: WEBP) {\n    url\n    alt\n  }\n}\n\nfragment AttributeBulkCreateError on AttributeBulkCreateError {\n  code\n  message\n  path\n}\n\nfragment ProductError on ProductError {\n  code\n  message\n  field\n}": types.ProductBasicFragmentDoc,
    "fragment PromotionFragment on Promotion {\n  id\n  name\n  type\n  description\n  startDate\n  endDate\n}\n\nfragment PromotionRuleFragment on PromotionRule {\n  id\n  name\n  description\n  promotion {\n    id\n  }\n  channels {\n    id\n    name\n  }\n  rewardValueType\n  rewardValue\n  cataloguePredicate\n  orderPredicate\n}": types.PromotionFragmentFragmentDoc,
    "fragment ShippingZoneDetails on ShippingZone {\n  id\n  name\n  description\n  default\n  countries {\n    code\n    country\n  }\n  warehouses {\n    id\n    name\n  }\n  channels {\n    id\n    name\n  }\n}\n\nfragment ShippingZoneError on ShippingError {\n  field\n  code\n  message\n  warehouses\n  channels\n}": types.ShippingZoneDetailsFragmentDoc,
    "mutation CreateToken($email: String!, $password: String!) {\n  tokenCreate(email: $email, password: $password) {\n    token\n    user {\n      id\n      email\n      isStaff\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation WebhookCreate($input: WebhookCreateInput!) {\n  webhookCreate(input: $input) {\n    webhook {\n      id\n      name\n      isActive\n      targetUrl\n      asyncEvents {\n        name\n        eventType\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation AppCreate {\n  appCreate(\n    input: {name: \"SaaS_WRAPPER_APP\", permissions: [MANAGE_ORDERS, MANAGE_PRODUCTS, MANAGE_USERS, MANAGE_STAFF]}\n  ) {\n    app {\n      id\n      tokens {\n        authToken\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}": types.CreateTokenDocument,
    "mutation CreateChannel($input: ChannelCreateInput!) {\n  channelCreate(input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannel($id: ID!, $input: ChannelUpdateInput!) {\n  channelUpdate(id: $id, input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeleteChannel($id: ID!, $input: ChannelDeleteInput) {\n  channelDelete(id: $id, input: $input) {\n    channel {\n      id\n      name\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ActivateChannel($id: ID!) {\n  channelActivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeactivateChannel($id: ID!) {\n  channelDeactivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation AddWarehousesToChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation RemoveWarehousesFromChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {removeWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ReorderChannelWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n  channelReorderWarehouses(channelId: $channelId, moves: $moves) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelOrderSettings($channelId: ID!, $input: OrderSettingsInput!) {\n  channelUpdate(id: $channelId, input: {orderSettings: $input}) {\n    channel {\n      id\n      orderSettings {\n        allowUnpaidOrders\n        automaticallyConfirmAllNewOrders\n        automaticallyFulfillNonShippableGiftCard\n        expireOrdersAfter\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelStockSettings($channelId: ID!, $input: StockSettingsInput!) {\n  channelUpdate(id: $channelId, input: {stockSettings: $input}) {\n    channel {\n      id\n      stockSettings {\n        allocationStrategy\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}": types.CreateChannelDocument,
    "mutation CheckoutCreate($channel: String!, $lines: [CheckoutLineInput!]!) {\n  checkoutCreate(input: {channel: $channel, lines: $lines}) {\n    checkout {\n      id\n      email\n      lines {\n        id\n        quantity\n        totalPrice {\n          gross {\n            ...Money\n          }\n        }\n        variant {\n          product {\n            id\n            name\n            slug\n            thumbnail {\n              url\n              alt\n            }\n            category {\n              name\n            }\n          }\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          name\n          id\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation CheckoutAddLine($id: ID!, $productVariantId: ID!) {\n  checkoutLinesAdd(id: $id, lines: [{quantity: 1, variantId: $productVariantId}]) {\n    checkout {\n      id\n      lines {\n        id\n        quantity\n        variant {\n          name\n          product {\n            name\n          }\n        }\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CheckoutDeleteLines($checkoutId: ID!, $lineIds: [ID!]!) {\n  checkoutLinesDelete(id: $checkoutId, linesIds: $lineIds) {\n    checkout {\n      id\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation checkoutLinesUpdate($checkoutId: ID!, $lines: [CheckoutLineUpdateInput!]!, $languageCode: LanguageCodeEnum!) {\n  checkoutLinesUpdate(id: $checkoutId, lines: $lines) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutLineDelete($checkoutId: ID!, $lineId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutLineDelete(id: $checkoutId, lineId: $lineId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutEmailUpdate($email: String!, $checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutEmailUpdate(email: $email, id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutCustomerAttach($checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutCustomerAttach(id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutShippingAddressUpdate($checkoutId: ID!, $shippingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutShippingAddressUpdate(\n    id: $checkoutId\n    shippingAddress: $shippingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutBillingAddressUpdate($checkoutId: ID!, $billingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutBillingAddressUpdate(\n    id: $checkoutId\n    billingAddress: $billingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutDeliveryMethodUpdate($checkoutId: ID!, $deliveryMethodId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutDeliveryMethodUpdate(\n    id: $checkoutId\n    deliveryMethodId: $deliveryMethodId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutAddPromoCode($checkoutId: ID, $promoCode: String!, $languageCode: LanguageCodeEnum!) {\n  checkoutAddPromoCode(checkoutId: $checkoutId, promoCode: $promoCode) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutRemovePromoCode($checkoutId: ID, $promoCode: String, $promoCodeId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutRemovePromoCode(\n    checkoutId: $checkoutId\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutComplete($checkoutId: ID!) {\n  checkoutComplete(id: $checkoutId) {\n    order {\n      id\n      number\n      total {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      ...CheckoutErrorFragment\n    }\n  }\n}": types.CheckoutCreateDocument,
    "mutation CreateWarehouse($input: WarehouseCreateInput!) {\n  createWarehouse(input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation UpdateWarehouse($id: ID!, $input: WarehouseUpdateInput!) {\n  updateWarehouse(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation ChannelUpdateWarehouses($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      id\n      name\n      warehouses {\n        id\n        name\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DeleteWarehouse($id: ID!) {\n  deleteWarehouse(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProductVariant($id: ID!, $input: ProductVariantInput!) {\n  productVariantUpdate(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    productVariant {\n      id\n      name\n      sku\n    }\n  }\n}\n\nmutation CreateAlcoraCategory {\n  categoryCreate(\n    input: {name: \"Alcora Admin Products\", slug: \"alcoraadmin\", description: \"\"}\n  ) {\n    category {\n      id\n      name\n      slug\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": types.CreateWarehouseDocument,
    "mutation ConfirmOrder($id: ID!) {\n  orderConfirm(id: $id) {\n    order {\n      status\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation FulfillOrder($order: ID!, $input: OrderFulfillInput!) {\n  orderFulfill(order: $order, input: $input) {\n    order {\n      id\n      status\n    }\n    fulfillments {\n      id\n    }\n    errors {\n      field\n      message\n    }\n  }\n}": types.ConfirmOrderDocument,
    "mutation paymentGatewaysInitialize($checkoutId: ID!, $paymentGateways: [PaymentGatewayToInitialize!]) {\n  paymentGatewayInitialize(id: $checkoutId, paymentGateways: $paymentGateways) {\n    errors {\n      field\n      message\n      code\n    }\n    gatewayConfigs {\n      id\n      data\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n}\n\nmutation transactionInitialize($checkoutId: ID!, $action: TransactionFlowStrategyEnum, $paymentGateway: PaymentGatewayToInitialize!, $amount: PositiveDecimal) {\n  transactionInitialize(\n    id: $checkoutId\n    action: $action\n    paymentGateway: $paymentGateway\n    amount: $amount\n  ) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation transactionProcess($id: ID!, $data: JSON) {\n  transactionProcess(id: $id, data: $data) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation CheckoutPaymentCreate($checkoutId: ID!, $input: PaymentInput!) {\n  checkoutPaymentCreate(checkoutId: $checkoutId, input: $input) {\n    checkout {\n      id\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    payment {\n      id\n      gateway\n      token\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": types.PaymentGatewaysInitializeDocument,
    "mutation CreateProductAttributes($attributes: [AttributeCreateInput!]!) {\n  attributeBulkCreate(attributes: $attributes) {\n    results {\n      attribute {\n        id\n        name\n        slug\n      }\n      errors {\n        ...AttributeBulkCreateError\n      }\n    }\n  }\n}\n\nmutation CreateProductType($name: String!, $slug: String!, $productAttributes: [ID!]!, $variantAttributes: [ID!]!, $kind: ProductTypeKindEnum!, $isShippingRequired: Boolean!) {\n  productTypeCreate(\n    input: {name: $name, slug: $slug, kind: $kind, isShippingRequired: $isShippingRequired, hasVariants: true, productAttributes: $productAttributes, variantAttributes: $variantAttributes}\n  ) {\n    productType {\n      id\n      name\n      productAttributes {\n        id\n        name\n      }\n      variantAttributes {\n        id\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation CreateProduct($input: ProductCreateInput!) {\n  productCreate(input: $input) {\n    product {\n      id\n      name\n      slug\n      variants {\n        id\n        sku\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation PublishProductToChannel($productId: ID!, $channelId: ID!) {\n  productChannelListingUpdate(\n    id: $productId\n    input: {updateChannels: [{channelId: $channelId, isPublished: true, isAvailableForPurchase: true, visibleInListings: true}]}\n  ) {\n    product {\n      id\n      name\n      channelListings {\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n    }\n    errors {\n      code\n      message\n      field\n    }\n  }\n}\n\nmutation CreateProductVariant($input: ProductVariantCreateInput!) {\n  productVariantCreate(input: $input) {\n    productVariant {\n      id\n      sku\n      name\n      pricing {\n        price {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation SetProductVariantPrice($id: ID!, $input: [ProductVariantChannelListingAddInput!]!) {\n  productVariantChannelListingUpdate(id: $id, input: $input) {\n    variant {\n      id\n      channelListings {\n        channel {\n          name\n        }\n        price {\n          amount\n          currency\n        }\n        costPrice {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProduct($id: ID!, $input: ProductInput!) {\n  productUpdate(id: $id, input: $input) {\n    product {\n      id\n      name\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": types.CreateProductAttributesDocument,
    "mutation PromotionCreate($input: PromotionCreateInput!) {\n  promotionCreate(input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleCreate($input: PromotionRuleCreateInput!) {\n  promotionRuleCreate(input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionUpdate($id: ID!, $input: PromotionUpdateInput!) {\n  promotionUpdate(id: $id, input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleUpdate($id: ID!, $input: PromotionRuleUpdateInput!) {\n  promotionRuleUpdate(id: $id, input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionDelete($id: ID!) {\n  promotionDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleDelete($id: ID!) {\n  promotionRuleDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}": types.PromotionCreateDocument,
    "mutation ShippingZoneCreate($input: ShippingZoneCreateInput!) {\n  shippingZoneCreate(input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}\n\nmutation ShippingZoneUpdate($id: ID!, $input: ShippingZoneUpdateInput!) {\n  shippingZoneUpdate(id: $id, input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}": types.ShippingZoneCreateDocument,
    "mutation UpdateStock($variantId: ID!, $warehouseId: ID!, $quantity: Int!) {\n  productVariantStocksUpdate(\n    variantId: $variantId\n    stocks: [{warehouse: $warehouseId, quantity: $quantity}]\n  ) {\n    productVariant {\n      stocks {\n        warehouse {\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CreateStock($variantId: ID!, $input: [StockInput!]!) {\n  productVariantStocksCreate(variantId: $variantId, stocks: $input) {\n    productVariant {\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}\n\nmutation DeleteProduct($productId: ID!) {\n  productDelete(id: $productId) {\n    errors {\n      message\n    }\n  }\n}": types.UpdateStockDocument,
    "mutation DraftOrderCreate($input: DraftOrderCreateInput!) {\n  draftOrderCreate(input: $input) {\n    order {\n      id\n      token\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n  draftOrderUpdate(id: $id, input: $input) {\n    order {\n      id\n      number\n      status\n      userEmail\n      customerNote\n      status\n      isPaid\n      lines {\n        variant {\n          id\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLinesCreate($id: ID!, $lines: [OrderLineCreateInput!]!) {\n  orderLinesCreate(id: $id, input: $lines) {\n    order {\n      id\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLineDelete($lineId: ID!) {\n  orderLineDelete(id: $lineId) {\n    order {\n      id\n      number\n      status\n    }\n    orderLine {\n      id\n      productName\n      quantity\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation OrderCreateFromDraftOrder($id: ID!) {\n  draftOrderComplete(id: $id) {\n    order {\n      id\n      status\n      number\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation DraftOrderDelete($id: ID!) {\n  draftOrderDelete(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}": types.DraftOrderCreateDocument,
    "query GetApps($first: Int = 10) {\n  apps(first: $first) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}": types.GetAppsDocument,
    "query GetChannelById($id: ID!) {\n  channel(id: $id) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery GetChannelBySlug($slug: String!) {\n  channel(slug: $slug) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery ListChannels {\n  channels {\n    ...ChannelBasicInfo\n  }\n}\n\nquery GetChannelWithWarehouses($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    warehouses {\n      id\n      name\n      slug\n      address {\n        streetAddress1\n        streetAddress2\n        city\n        country {\n          code\n          country\n        }\n      }\n    }\n  }\n}\n\nquery GetChannelWithShippingZones($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    availableShippingMethodsPerCountry {\n      countryCode\n      shippingMethods {\n        id\n        name\n        minimumOrderPrice {\n          ...Money\n        }\n        maximumOrderPrice {\n          ...Money\n        }\n        minimumOrderWeight {\n          unit\n          value\n        }\n        maximumOrderWeight {\n          unit\n          value\n        }\n      }\n    }\n  }\n}\n\nquery GetShippingMethods {\n  checkout(id: \"Q2hlY2tvdXQ6YjcwZWFiZGEtMTZiNi00MzY0LThkYWUtODRiNzJhYzc2MzVi\") {\n    availableShippingMethods {\n      id\n      name\n      price {\n        amount\n        currency\n      }\n    }\n    shippingMethods {\n      id\n      name\n    }\n  }\n}\n\nquery GetChannelStockSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    stockSettings {\n      allocationStrategy\n    }\n    warehouses {\n      id\n      name\n      slug\n    }\n  }\n}\n\nquery GetChannelOrderSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    orderSettings {\n      allowUnpaidOrders\n      automaticallyConfirmAllNewOrders\n      automaticallyFulfillNonShippableGiftCard\n      expireOrdersAfter\n    }\n  }\n}\n\nquery CheckProductInChannel($productId: ID!, $channelSlug: String!) {\n  product(id: $productId, channel: $channelSlug) {\n    id\n    name\n    isAvailableForPurchase\n    isAvailable\n    channelListings {\n      channel {\n        id\n        slug\n      }\n      isPublished\n      visibleInListings\n      publishedAt\n      availableForPurchaseAt\n    }\n    variants {\n      id\n      name\n      sku\n      channelListings {\n        channel {\n          id\n          slug\n        }\n        price {\n          ...Money\n        }\n        costPrice {\n          ...Money\n        }\n        preorderThreshold {\n          quantity\n        }\n      }\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n        quantityAllocated\n      }\n    }\n  }\n}\n\nquery ListProductsInChannel($channelSlug: String!, $first: Int = 100, $after: String, $filter: ProductFilterInput) {\n  products(channel: $channelSlug, first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        thumbnail {\n          url\n          alt\n        }\n        category {\n          id\n          name\n        }\n        channelListings {\n          channel {\n            id\n            slug\n          }\n          isPublished\n          visibleInListings\n        }\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetLowStockProductsInChannel($channelSlug: String!, $threshold: Int = 10, $first: Int = 100) {\n  products(channel: $channelSlug, first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}": types.GetChannelByIdDocument,
    "query CheckoutFind($id: ID!) {\n  checkout(id: $id) {\n    id\n    email\n    lines {\n      id\n      quantity\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n      variant {\n        product {\n          id\n          name\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            name\n          }\n        }\n        pricing {\n          price {\n            gross {\n              ...Money\n            }\n          }\n        }\n        name\n        id\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nquery checkout($id: ID!, $languageCode: LanguageCodeEnum!) {\n  checkout(id: $id) {\n    ...CheckoutFragment\n  }\n}\n\nquery channel($slug: String!) {\n  channel(slug: $slug) {\n    countries {\n      code\n    }\n  }\n}\n\nquery addressValidationRules($countryCode: CountryCode!) {\n  addressValidationRules(countryCode: $countryCode) {\n    ...ValidationRulesFragment\n  }\n}": types.CheckoutFindDocument,
    "query ProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery ProductsInventory($first: Int = 50, $after: String, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        productType {\n          id\n          name\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n        variants {\n          id\n          name\n          sku\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          stocks {\n            ...StockBasic\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery LowStockProducts($threshold: Int = 10, $first: Int = 100) {\n  products(first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery Warehouses($first: Int = 100) {\n  warehouses(first: $first) {\n    edges {\n      node {\n        ...WarehouseDetails\n      }\n    }\n  }\n}\n\nquery ChannelWarehouses($channelId: ID!) {\n  channel(id: $channelId) {\n    id\n    warehouses {\n      id\n      name\n    }\n  }\n}\n\nquery WarehouseStock($id: ID!, $first: Int = 100) {\n  warehouse(id: $id) {\n    ...WarehouseBasic\n    stocks(first: $first) {\n      edges {\n        node {\n          id\n          productVariant {\n            id\n            name\n            sku\n          }\n          quantity\n          quantityAllocated\n        }\n      }\n    }\n  }\n}\n\nquery GetInventory($channel: String!, $first: Int, $after: String) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          quantityAvailable\n          quantityOrdered\n          margin\n          quantityLimitPerCustomer\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": types.ProductInventoryDocument,
    "query order($id: ID!, $languageCode: LanguageCodeEnum!) {\n  order(id: $id) {\n    ...OrderFragment\n  }\n}\n\nquery FindOrder($id: ID!) {\n  order(id: $id) {\n    ...OrderBasic\n    lines {\n      id\n      variant {\n        id\n      }\n      productName\n      quantity\n      unitPrice {\n        gross {\n          ...Money\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    shippingAddress {\n      firstName\n      lastName\n      streetAddress1\n      city\n      country {\n        code\n      }\n    }\n  }\n}\n\nquery GetOrdersByStatus($status: [OrderStatusFilter!]!, $first: Int!) {\n  orders(first: $first, filter: {status: $status}) {\n    edges {\n      node {\n        id\n        status\n        userEmail\n        created\n        number\n        total {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOrderFulfillment($id: ID!) {\n  order(id: $id) {\n    ...OrderFulfillment\n  }\n}\n\nquery GetOrdersByChannel($channel: String!, $first: Int, $filter: OrderFilterInput) {\n  orders(channel: $channel, first: $first, filter: $filter) {\n    edges {\n      node {\n        id\n        number\n        status\n        created\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n}": types.OrderDocument,
    "query ProductList($first: Int = 9, $channel: String!) {\n  products(first: $first, channel: $channel) {\n    edges {\n      node {\n        productType {\n          id\n          name\n        }\n        ...ProductListItem\n      }\n    }\n  }\n}\n\nquery GetProducts($first: Int!, $after: String, $channel: String!, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, channel: $channel, filter: $filter) {\n    edges {\n      node {\n        ...ProductBasic\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductDetails($id: ID!, $channel: String!) {\n  product(id: $id, channel: $channel) {\n    ...ProductDetails\n  }\n}\n\nquery SearchProductsBasic($search: String!, $first: Int!, $channel: String!) {\n  products(first: $first, filter: {search: $search}, channel: $channel) {\n    edges {\n      node {\n        ...ProductBasic\n        variants {\n          id\n          name\n          sku\n        }\n      }\n    }\n  }\n}\n\nquery GetProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery GetAllCategories {\n  categories(first: 50) {\n    edges {\n      node {\n        id\n        name\n        slug\n      }\n    }\n  }\n}\n\nquery GetProductsByCategory($categoryId: ID!) {\n  category(id: $categoryId) {\n    id\n    name\n    products(first: 100, channel: \"Q2hhbm5lbDoz\") {\n      edges {\n        node {\n          ...ProductBasic\n        }\n      }\n    }\n  }\n}\n\nquery ProductListByCategory($slug: String!, $channel: String!) {\n  category(slug: $slug) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100, channel: $channel) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetCategories($first: Int!) {\n  categories(first: $first) {\n    edges {\n      node {\n        id\n        name\n        slug\n        products(first: $first) {\n          totalCount\n        }\n      }\n    }\n  }\n}\n\nquery SearchProductsSorted($search: String!, $sortBy: ProductOrderField!, $sortDirection: OrderDirection!, $first: Int!, $after: String, $channel: String!) {\n  products(\n    first: $first\n    after: $after\n    channel: $channel\n    sortBy: {field: $sortBy, direction: $sortDirection}\n    filter: {search: $search}\n  ) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListPaginated($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListByCollection($slug: String!, $channel: String!) {\n  collection(slug: $slug, channel: $channel) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetProductTypeBySlug($slug: String!) {\n  productTypes(filter: {search: $slug}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        productAttributes {\n          id\n          name\n        }\n        variantAttributes {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nquery GetAttributeBySlug($slug: String!) {\n  attributes(filter: {slugs: [$slug]}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        inputType\n        type\n      }\n    }\n  }\n}\n\nquery GetProductsForMeiliSearch($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        slug\n        variants {\n          id\n          name\n          sku\n          quantityAvailable\n          channelListings {\n            costPrice {\n              currency\n              amount\n            }\n          }\n          pricing {\n            price {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        pricing {\n          priceRange {\n            start {\n              gross {\n                currency\n                amount\n              }\n            }\n            stop {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductBySlug($slug: String!) {\n  product(slug: $slug) {\n    id\n    name\n    slug\n    variants {\n      id\n      name\n      sku\n    }\n  }\n}": types.ProductListDocument,
    "query Promotions($first: Int, $after: String) {\n  promotions(first: $first, after: $after) {\n    edges {\n      node {\n        ...PromotionFragment\n        rules {\n          id\n          name\n          rewardValueType\n          rewardValue\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery Promotion($id: ID!) {\n  promotion(id: $id) {\n    ...PromotionFragment\n    rules {\n      ...PromotionRuleFragment\n    }\n    events {\n      ... on PromotionEventInterface {\n        type\n        date\n        createdBy {\n          ... on User {\n            id\n            email\n          }\n        }\n      }\n      ... on PromotionRuleEventInterface {\n        ruleId\n      }\n    }\n  }\n}": types.PromotionsDocument,
    "query CheckStock($productId: ID!) {\n  product(id: $productId) {\n    name\n    variants {\n      sku\n      attributes {\n        attribute {\n          id\n          name\n        }\n        values {\n          id\n          name\n        }\n      }\n      stocks {\n        quantity\n        warehouse {\n          name\n        }\n      }\n    }\n    channelListings {\n      channel {\n        name\n      }\n    }\n  }\n}": types.CheckStockDocument,
    "query DraftOrderDetails($id: ID!) {\n  order(id: $id) {\n    id\n    token\n    created\n    status\n    number\n    userEmail\n    customerNote\n    shippingAddress {\n      firstName\n      lastName\n      phone\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    subtotal {\n      gross {\n        amount\n        currency\n      }\n    }\n    lines {\n      id\n      productName\n      variantName\n      quantity\n      unitPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      variant {\n        id\n        product {\n          id\n          name\n        }\n      }\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    metadata {\n      key\n      value\n    }\n    privateMetadata {\n      key\n      value\n    }\n  }\n}\n\nquery DraftOrders($first: Int!, $after: String) {\n  draftOrders(first: $first, after: $after) {\n    edges {\n      node {\n        id\n        created\n        status\n        number\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n        lines {\n          id\n          productName\n          quantity\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": types.DraftOrderDetailsDocument,
    "subscription OrderUpdated {\n  orderUpdated {\n    order {\n      id\n      status\n    }\n  }\n}\n\nsubscription OrderCreatedSubscription {\n  event {\n    ...OrderCreatedWebhookPayload\n  }\n}": types.OrderUpdatedDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment BusinessCustomer on User {    const { formatCurrency } = useCurrency();
\n  id\n  email\n  firstName\n  lastName\n  isActive\n  metadata {\n    key\n    value\n  }\n  addresses {\n    id\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n    isDefaultShippingAddress\n    isDefaultBillingAddress\n  }\n}\n\nfragment ChannelInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}"): (typeof documents)["fragment BusinessCustomer on User {\n  id\n  email\n  firstName\n  lastName\n  isActive\n  metadata {\n    key\n    value\n  }\n  addresses {\n    id\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n    isDefaultShippingAddress\n    isDefaultBillingAddress\n  }\n}\n\nfragment ChannelInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ChannelBasicData on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelErrors on ChannelError {\n  field\n  message\n  code\n  shippingZones\n  warehouses\n}\n\nfragment ChannelWithWarehouses on Channel {\n  ...ChannelBasicData\n  warehouses {\n    id\n    name\n    slug\n  }\n}\n\nfragment ChannelWithSettings on Channel {\n  ...ChannelBasicData\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n}\n\nfragment ChannelBasicInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelDetailedInfo on Channel {\n  ...ChannelBasicInfo\n  hasOrders\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n  warehouses {\n    id\n    name\n    slug\n  }\n  countries {\n    code\n    country\n  }\n}"): (typeof documents)["fragment ChannelBasicData on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelErrors on ChannelError {\n  field\n  message\n  code\n  shippingZones\n  warehouses\n}\n\nfragment ChannelWithWarehouses on Channel {\n  ...ChannelBasicData\n  warehouses {\n    id\n    name\n    slug\n  }\n}\n\nfragment ChannelWithSettings on Channel {\n  ...ChannelBasicData\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n}\n\nfragment ChannelBasicInfo on Channel {\n  id\n  name\n  slug\n  currencyCode\n  isActive\n  defaultCountry {\n    code\n    country\n  }\n}\n\nfragment ChannelDetailedInfo on Channel {\n  ...ChannelBasicInfo\n  hasOrders\n  stockSettings {\n    allocationStrategy\n  }\n  orderSettings {\n    allowUnpaidOrders\n    automaticallyConfirmAllNewOrders\n    automaticallyFulfillNonShippableGiftCard\n    expireOrdersAfter\n  }\n  warehouses {\n    id\n    name\n    slug\n  }\n  countries {\n    code\n    country\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CheckoutErrorFragment on CheckoutError {\n  message\n  field\n  code\n}\n\nfragment GiftCardFragment on GiftCard {\n  displayCode\n  id\n  currentBalance {\n    ...Money\n  }\n}\n\nfragment ValidationRulesFragment on AddressValidationData {\n  addressFormat\n  allowedFields\n  requiredFields\n  countryAreaType\n  postalCodeType\n  cityType\n  countryAreaChoices {\n    raw\n    verbose\n  }\n}\n\nfragment PaymentGatewayFragment on PaymentGateway {\n  id\n  name\n  currencies\n  config {\n    field\n    value\n  }\n}\n\nfragment CheckoutFragment on Checkout {\n  id\n  email\n  discount {\n    ...Money\n  }\n  voucherCode\n  discountName\n  translatedDiscountName\n  giftCards {\n    ...GiftCardFragment\n  }\n  channel {\n    id\n    slug\n  }\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  authorizeStatus\n  chargeStatus\n  isShippingRequired\n  user {\n    id\n    email\n  }\n  availablePaymentGateways {\n    ...PaymentGatewayFragment\n  }\n  deliveryMethod {\n    ... on ShippingMethod {\n      id\n    }\n    ... on Warehouse {\n      id\n    }\n  }\n  shippingMethods {\n    id\n    name\n    price {\n      ...Money\n    }\n    maximumDeliveryDays\n    minimumDeliveryDays\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotalPrice {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...CheckoutLineFragment\n  }\n}\n\nfragment CheckoutLineFragment on CheckoutLine {\n  id\n  quantity\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    ...Money\n  }\n  variant {\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n    id\n    name\n    translation(languageCode: $languageCode) {\n      name\n    }\n    product {\n      name\n      translation(languageCode: $languageCode) {\n        language {\n          code\n        }\n        id\n        name\n      }\n      media {\n        alt\n        type\n        url(size: 72)\n      }\n    }\n    media {\n      alt\n      type\n      url(size: 72)\n    }\n  }\n}\n\nfragment AddressFragment on Address {\n  id\n  city\n  phone\n  postalCode\n  companyName\n  cityArea\n  streetAddress1\n  streetAddress2\n  countryArea\n  country {\n    country\n    code\n  }\n  firstName\n  lastName\n}"): (typeof documents)["fragment CheckoutErrorFragment on CheckoutError {\n  message\n  field\n  code\n}\n\nfragment GiftCardFragment on GiftCard {\n  displayCode\n  id\n  currentBalance {\n    ...Money\n  }\n}\n\nfragment ValidationRulesFragment on AddressValidationData {\n  addressFormat\n  allowedFields\n  requiredFields\n  countryAreaType\n  postalCodeType\n  cityType\n  countryAreaChoices {\n    raw\n    verbose\n  }\n}\n\nfragment PaymentGatewayFragment on PaymentGateway {\n  id\n  name\n  currencies\n  config {\n    field\n    value\n  }\n}\n\nfragment CheckoutFragment on Checkout {\n  id\n  email\n  discount {\n    ...Money\n  }\n  voucherCode\n  discountName\n  translatedDiscountName\n  giftCards {\n    ...GiftCardFragment\n  }\n  channel {\n    id\n    slug\n  }\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  authorizeStatus\n  chargeStatus\n  isShippingRequired\n  user {\n    id\n    email\n  }\n  availablePaymentGateways {\n    ...PaymentGatewayFragment\n  }\n  deliveryMethod {\n    ... on ShippingMethod {\n      id\n    }\n    ... on Warehouse {\n      id\n    }\n  }\n  shippingMethods {\n    id\n    name\n    price {\n      ...Money\n    }\n    maximumDeliveryDays\n    minimumDeliveryDays\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotalPrice {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...CheckoutLineFragment\n  }\n}\n\nfragment CheckoutLineFragment on CheckoutLine {\n  id\n  quantity\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    ...Money\n  }\n  variant {\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n    id\n    name\n    translation(languageCode: $languageCode) {\n      name\n    }\n    product {\n      name\n      translation(languageCode: $languageCode) {\n        language {\n          code\n        }\n        id\n        name\n      }\n      media {\n        alt\n        type\n        url(size: 72)\n      }\n    }\n    media {\n      alt\n      type\n      url(size: 72)\n    }\n  }\n}\n\nfragment AddressFragment on Address {\n  id\n  city\n  phone\n  postalCode\n  companyName\n  cityArea\n  streetAddress1\n  streetAddress2\n  countryArea\n  country {\n    country\n    code\n  }\n  firstName\n  lastName\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment StockBasic on Stock {\n  id\n  warehouse {\n    id\n    name\n  }\n  quantity\n  quantityAllocated\n  quantityReserved\n}\n\nfragment ProductInventory on Product {\n  id\n  name\n  variants {\n    id\n    sku\n    name\n    quantityAvailable\n    stocks {\n      ...StockBasic\n    }\n  }\n}\n\nfragment WarehouseBasic on Warehouse {\n  id\n  name\n  email\n  isPrivate\n  slug\n}\n\nfragment WarehouseDetails on Warehouse {\n  ...WarehouseBasic\n  address {\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    countryArea\n    phone\n  }\n  metadata {\n    key\n    value\n  }\n}"): (typeof documents)["fragment StockBasic on Stock {\n  id\n  warehouse {\n    id\n    name\n  }\n  quantity\n  quantityAllocated\n  quantityReserved\n}\n\nfragment ProductInventory on Product {\n  id\n  name\n  variants {\n    id\n    sku\n    name\n    quantityAvailable\n    stocks {\n      ...StockBasic\n    }\n  }\n}\n\nfragment WarehouseBasic on Warehouse {\n  id\n  name\n  email\n  isPrivate\n  slug\n}\n\nfragment WarehouseDetails on Warehouse {\n  ...WarehouseBasic\n  address {\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    countryArea\n    phone\n  }\n  metadata {\n    key\n    value\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment OrderCreatedWebhookPayload on OrderCreated {\n  order {\n    userEmail\n    id\n    number\n    user {\n      email\n      firstName\n      lastName\n    }\n  }\n}"): (typeof documents)["fragment OrderCreatedWebhookPayload on OrderCreated {\n  order {\n    userEmail\n    id\n    number\n    user {\n      email\n      firstName\n      lastName\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Money on Money {\n  currency\n  amount\n}\n\nfragment OrderLineFragment on OrderLine {\n  id\n  quantity\n  variant {\n    name\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  productName\n  variantName\n  thumbnail(size: 128, format: WEBP) {\n    alt\n    url\n  }\n}\n\nfragment ShippingFragment on ShippingMethod {\n  name\n  minimumDeliveryDays\n  maximumDeliveryDays\n}\n\nfragment OrderFragment on Order {\n  id\n  number\n  status\n  created\n  userEmail\n  isPaid\n  discounts {\n    type\n    name\n    amount {\n      ...Money\n    }\n  }\n  chargeStatus\n  authorizeStatus\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  deliveryMethod {\n    ...ShippingFragment\n  }\n  total {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  voucher {\n    code\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...OrderLineFragment\n  }\n  totalBalance {\n    ...Money\n  }\n  totalCaptured {\n    ...Money\n  }\n}\n\nfragment OrderBasic on Order {\n  id\n  number\n  created\n  status\n  total {\n    gross {\n      ...Money\n    }\n  }\n}\n\nfragment OrderDetails on Order {\n  ...OrderBasic\n  shippingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  billingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  userEmail\n  lines {\n    id\n    productName\n    variantName\n    quantity\n    unitPrice {\n      gross {\n        ...Money\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  paymentStatus\n}\n\nfragment OrderFulfillment on Order {\n  id\n  number\n  fulfillments {\n    id\n    status\n    trackingNumber\n    created\n    lines {\n      id\n      quantity\n      orderLine {\n        id\n        productName\n        variantName\n      }\n    }\n  }\n}"): (typeof documents)["fragment Money on Money {\n  currency\n  amount\n}\n\nfragment OrderLineFragment on OrderLine {\n  id\n  quantity\n  variant {\n    name\n    attributes(variantSelection: ALL) {\n      values {\n        name\n        dateTime\n        boolean\n        translation(languageCode: $languageCode) {\n          name\n        }\n      }\n    }\n  }\n  totalPrice {\n    gross {\n      ...Money\n    }\n  }\n  undiscountedUnitPrice {\n    gross {\n      ...Money\n    }\n  }\n  unitPrice {\n    gross {\n      ...Money\n    }\n  }\n  productName\n  variantName\n  thumbnail(size: 128, format: WEBP) {\n    alt\n    url\n  }\n}\n\nfragment ShippingFragment on ShippingMethod {\n  name\n  minimumDeliveryDays\n  maximumDeliveryDays\n}\n\nfragment OrderFragment on Order {\n  id\n  number\n  status\n  created\n  userEmail\n  isPaid\n  discounts {\n    type\n    name\n    amount {\n      ...Money\n    }\n  }\n  chargeStatus\n  authorizeStatus\n  shippingAddress {\n    ...AddressFragment\n  }\n  billingAddress {\n    ...AddressFragment\n  }\n  deliveryMethod {\n    ...ShippingFragment\n  }\n  total {\n    gross {\n      ...Money\n    }\n    tax {\n      ...Money\n    }\n  }\n  voucher {\n    code\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  lines {\n    ...OrderLineFragment\n  }\n  totalBalance {\n    ...Money\n  }\n  totalCaptured {\n    ...Money\n  }\n}\n\nfragment OrderBasic on Order {\n  id\n  number\n  created\n  status\n  total {\n    gross {\n      ...Money\n    }\n  }\n}\n\nfragment OrderDetails on Order {\n  ...OrderBasic\n  shippingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  billingAddress {\n    firstName\n    lastName\n    companyName\n    streetAddress1\n    streetAddress2\n    city\n    cityArea\n    postalCode\n    country {\n      code\n      country\n    }\n    phone\n  }\n  userEmail\n  lines {\n    id\n    productName\n    variantName\n    quantity\n    unitPrice {\n      gross {\n        ...Money\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n  subtotal {\n    gross {\n      ...Money\n    }\n  }\n  shippingPrice {\n    gross {\n      ...Money\n    }\n  }\n  paymentStatus\n}\n\nfragment OrderFulfillment on Order {\n  id\n  number\n  fulfillments {\n    id\n    status\n    trackingNumber\n    created\n    lines {\n      id\n      quantity\n      orderLine {\n        id\n        productName\n        variantName\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProductBasic on Product {\n  id\n  name\n  slug\n  description\n  thumbnail {\n    url\n    alt\n  }\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n}\n\nfragment VariantDetails on ProductVariant {\n  id\n  name\n  sku\n  quantityAvailable\n  channelListings {\n    costPrice {\n      ...Money\n    }\n  }\n  pricing {\n    price {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nfragment ProductDetails on Product {\n  ...ProductBasic\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n    discount {\n      gross {\n        ...Money\n      }\n    }\n  }\n  isAvailable\n  variants {\n    ...VariantDetails\n  }\n  metadata {\n    key\n    value\n  }\n}\n\nfragment ProductListItem on Product {\n  id\n  name\n  slug\n  variants {\n    ...VariantDetails\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n  category {\n    id\n    name\n  }\n  thumbnail(size: 1024, format: WEBP) {\n    url\n    alt\n  }\n}\n\nfragment AttributeBulkCreateError on AttributeBulkCreateError {\n  code\n  message\n  path\n}\n\nfragment ProductError on ProductError {\n  code\n  message\n  field\n}"): (typeof documents)["fragment ProductBasic on Product {\n  id\n  name\n  slug\n  description\n  thumbnail {\n    url\n    alt\n  }\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n}\n\nfragment VariantDetails on ProductVariant {\n  id\n  name\n  sku\n  quantityAvailable\n  channelListings {\n    costPrice {\n      ...Money\n    }\n  }\n  pricing {\n    price {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nfragment ProductDetails on Product {\n  ...ProductBasic\n  category {\n    id\n    name\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n    discount {\n      gross {\n        ...Money\n      }\n    }\n  }\n  isAvailable\n  variants {\n    ...VariantDetails\n  }\n  metadata {\n    key\n    value\n  }\n}\n\nfragment ProductListItem on Product {\n  id\n  name\n  slug\n  variants {\n    ...VariantDetails\n  }\n  pricing {\n    priceRange {\n      start {\n        gross {\n          ...Money\n        }\n      }\n      stop {\n        gross {\n          ...Money\n        }\n      }\n    }\n  }\n  category {\n    id\n    name\n  }\n  thumbnail(size: 1024, format: WEBP) {\n    url\n    alt\n  }\n}\n\nfragment AttributeBulkCreateError on AttributeBulkCreateError {\n  code\n  message\n  path\n}\n\nfragment ProductError on ProductError {\n  code\n  message\n  field\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PromotionFragment on Promotion {\n  id\n  name\n  type\n  description\n  startDate\n  endDate\n}\n\nfragment PromotionRuleFragment on PromotionRule {\n  id\n  name\n  description\n  promotion {\n    id\n  }\n  channels {\n    id\n    name\n  }\n  rewardValueType\n  rewardValue\n  cataloguePredicate\n  orderPredicate\n}"): (typeof documents)["fragment PromotionFragment on Promotion {\n  id\n  name\n  type\n  description\n  startDate\n  endDate\n}\n\nfragment PromotionRuleFragment on PromotionRule {\n  id\n  name\n  description\n  promotion {\n    id\n  }\n  channels {\n    id\n    name\n  }\n  rewardValueType\n  rewardValue\n  cataloguePredicate\n  orderPredicate\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ShippingZoneDetails on ShippingZone {\n  id\n  name\n  description\n  default\n  countries {\n    code\n    country\n  }\n  warehouses {\n    id\n    name\n  }\n  channels {\n    id\n    name\n  }\n}\n\nfragment ShippingZoneError on ShippingError {\n  field\n  code\n  message\n  warehouses\n  channels\n}"): (typeof documents)["fragment ShippingZoneDetails on ShippingZone {\n  id\n  name\n  description\n  default\n  countries {\n    code\n    country\n  }\n  warehouses {\n    id\n    name\n  }\n  channels {\n    id\n    name\n  }\n}\n\nfragment ShippingZoneError on ShippingError {\n  field\n  code\n  message\n  warehouses\n  channels\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateToken($email: String!, $password: String!) {\n  tokenCreate(email: $email, password: $password) {\n    token\n    user {\n      id\n      email\n      isStaff\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation WebhookCreate($input: WebhookCreateInput!) {\n  webhookCreate(input: $input) {\n    webhook {\n      id\n      name\n      isActive\n      targetUrl\n      asyncEvents {\n        name\n        eventType\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation AppCreate {\n  appCreate(\n    input: {name: \"SaaS_WRAPPER_APP\", permissions: [MANAGE_ORDERS, MANAGE_PRODUCTS, MANAGE_USERS, MANAGE_STAFF]}\n  ) {\n    app {\n      id\n      tokens {\n        authToken\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}"): (typeof documents)["mutation CreateToken($email: String!, $password: String!) {\n  tokenCreate(email: $email, password: $password) {\n    token\n    user {\n      id\n      email\n      isStaff\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation WebhookCreate($input: WebhookCreateInput!) {\n  webhookCreate(input: $input) {\n    webhook {\n      id\n      name\n      isActive\n      targetUrl\n      asyncEvents {\n        name\n        eventType\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation AppCreate {\n  appCreate(\n    input: {name: \"SaaS_WRAPPER_APP\", permissions: [MANAGE_ORDERS, MANAGE_PRODUCTS, MANAGE_USERS, MANAGE_STAFF]}\n  ) {\n    app {\n      id\n      tokens {\n        authToken\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateChannel($input: ChannelCreateInput!) {\n  channelCreate(input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannel($id: ID!, $input: ChannelUpdateInput!) {\n  channelUpdate(id: $id, input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeleteChannel($id: ID!, $input: ChannelDeleteInput) {\n  channelDelete(id: $id, input: $input) {\n    channel {\n      id\n      name\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ActivateChannel($id: ID!) {\n  channelActivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeactivateChannel($id: ID!) {\n  channelDeactivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation AddWarehousesToChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation RemoveWarehousesFromChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {removeWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ReorderChannelWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n  channelReorderWarehouses(channelId: $channelId, moves: $moves) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelOrderSettings($channelId: ID!, $input: OrderSettingsInput!) {\n  channelUpdate(id: $channelId, input: {orderSettings: $input}) {\n    channel {\n      id\n      orderSettings {\n        allowUnpaidOrders\n        automaticallyConfirmAllNewOrders\n        automaticallyFulfillNonShippableGiftCard\n        expireOrdersAfter\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelStockSettings($channelId: ID!, $input: StockSettingsInput!) {\n  channelUpdate(id: $channelId, input: {stockSettings: $input}) {\n    channel {\n      id\n      stockSettings {\n        allocationStrategy\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}"): (typeof documents)["mutation CreateChannel($input: ChannelCreateInput!) {\n  channelCreate(input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannel($id: ID!, $input: ChannelUpdateInput!) {\n  channelUpdate(id: $id, input: $input) {\n    channel {\n      ...ChannelWithSettings\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeleteChannel($id: ID!, $input: ChannelDeleteInput) {\n  channelDelete(id: $id, input: $input) {\n    channel {\n      id\n      name\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ActivateChannel($id: ID!) {\n  channelActivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation DeactivateChannel($id: ID!) {\n  channelDeactivate(id: $id) {\n    channel {\n      id\n      name\n      isActive\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation AddWarehousesToChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation RemoveWarehousesFromChannel($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {removeWarehouses: $warehouseIds}) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation ReorderChannelWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n  channelReorderWarehouses(channelId: $channelId, moves: $moves) {\n    channel {\n      ...ChannelWithWarehouses\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelOrderSettings($channelId: ID!, $input: OrderSettingsInput!) {\n  channelUpdate(id: $channelId, input: {orderSettings: $input}) {\n    channel {\n      id\n      orderSettings {\n        allowUnpaidOrders\n        automaticallyConfirmAllNewOrders\n        automaticallyFulfillNonShippableGiftCard\n        expireOrdersAfter\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}\n\nmutation UpdateChannelStockSettings($channelId: ID!, $input: StockSettingsInput!) {\n  channelUpdate(id: $channelId, input: {stockSettings: $input}) {\n    channel {\n      id\n      stockSettings {\n        allocationStrategy\n      }\n    }\n    errors {\n      ...ChannelErrors\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CheckoutCreate($channel: String!, $lines: [CheckoutLineInput!]!) {\n  checkoutCreate(input: {channel: $channel, lines: $lines}) {\n    checkout {\n      id\n      email\n      lines {\n        id\n        quantity\n        totalPrice {\n          gross {\n            ...Money\n          }\n        }\n        variant {\n          product {\n            id\n            name\n            slug\n            thumbnail {\n              url\n              alt\n            }\n            category {\n              name\n            }\n          }\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          name\n          id\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation CheckoutAddLine($id: ID!, $productVariantId: ID!) {\n  checkoutLinesAdd(id: $id, lines: [{quantity: 1, variantId: $productVariantId}]) {\n    checkout {\n      id\n      lines {\n        id\n        quantity\n        variant {\n          name\n          product {\n            name\n          }\n        }\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CheckoutDeleteLines($checkoutId: ID!, $lineIds: [ID!]!) {\n  checkoutLinesDelete(id: $checkoutId, linesIds: $lineIds) {\n    checkout {\n      id\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation checkoutLinesUpdate($checkoutId: ID!, $lines: [CheckoutLineUpdateInput!]!, $languageCode: LanguageCodeEnum!) {\n  checkoutLinesUpdate(id: $checkoutId, lines: $lines) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutLineDelete($checkoutId: ID!, $lineId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutLineDelete(id: $checkoutId, lineId: $lineId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutEmailUpdate($email: String!, $checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutEmailUpdate(email: $email, id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutCustomerAttach($checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutCustomerAttach(id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutShippingAddressUpdate($checkoutId: ID!, $shippingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutShippingAddressUpdate(\n    id: $checkoutId\n    shippingAddress: $shippingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutBillingAddressUpdate($checkoutId: ID!, $billingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutBillingAddressUpdate(\n    id: $checkoutId\n    billingAddress: $billingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutDeliveryMethodUpdate($checkoutId: ID!, $deliveryMethodId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutDeliveryMethodUpdate(\n    id: $checkoutId\n    deliveryMethodId: $deliveryMethodId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutAddPromoCode($checkoutId: ID, $promoCode: String!, $languageCode: LanguageCodeEnum!) {\n  checkoutAddPromoCode(checkoutId: $checkoutId, promoCode: $promoCode) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutRemovePromoCode($checkoutId: ID, $promoCode: String, $promoCodeId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutRemovePromoCode(\n    checkoutId: $checkoutId\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutComplete($checkoutId: ID!) {\n  checkoutComplete(id: $checkoutId) {\n    order {\n      id\n      number\n      total {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      ...CheckoutErrorFragment\n    }\n  }\n}"): (typeof documents)["mutation CheckoutCreate($channel: String!, $lines: [CheckoutLineInput!]!) {\n  checkoutCreate(input: {channel: $channel, lines: $lines}) {\n    checkout {\n      id\n      email\n      lines {\n        id\n        quantity\n        totalPrice {\n          gross {\n            ...Money\n          }\n        }\n        variant {\n          product {\n            id\n            name\n            slug\n            thumbnail {\n              url\n              alt\n            }\n            category {\n              name\n            }\n          }\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          name\n          id\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation CheckoutAddLine($id: ID!, $productVariantId: ID!) {\n  checkoutLinesAdd(id: $id, lines: [{quantity: 1, variantId: $productVariantId}]) {\n    checkout {\n      id\n      lines {\n        id\n        quantity\n        variant {\n          name\n          product {\n            name\n          }\n        }\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CheckoutDeleteLines($checkoutId: ID!, $lineIds: [ID!]!) {\n  checkoutLinesDelete(id: $checkoutId, linesIds: $lineIds) {\n    checkout {\n      id\n    }\n    errors {\n      field\n      code\n    }\n  }\n}\n\nmutation checkoutLinesUpdate($checkoutId: ID!, $lines: [CheckoutLineUpdateInput!]!, $languageCode: LanguageCodeEnum!) {\n  checkoutLinesUpdate(id: $checkoutId, lines: $lines) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutLineDelete($checkoutId: ID!, $lineId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutLineDelete(id: $checkoutId, lineId: $lineId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutEmailUpdate($email: String!, $checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutEmailUpdate(email: $email, id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutCustomerAttach($checkoutId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutCustomerAttach(id: $checkoutId) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutShippingAddressUpdate($checkoutId: ID!, $shippingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutShippingAddressUpdate(\n    id: $checkoutId\n    shippingAddress: $shippingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutBillingAddressUpdate($checkoutId: ID!, $billingAddress: AddressInput!, $validationRules: CheckoutAddressValidationRules, $languageCode: LanguageCodeEnum!) {\n  checkoutBillingAddressUpdate(\n    id: $checkoutId\n    billingAddress: $billingAddress\n    validationRules: $validationRules\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutDeliveryMethodUpdate($checkoutId: ID!, $deliveryMethodId: ID!, $languageCode: LanguageCodeEnum!) {\n  checkoutDeliveryMethodUpdate(\n    id: $checkoutId\n    deliveryMethodId: $deliveryMethodId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutAddPromoCode($checkoutId: ID, $promoCode: String!, $languageCode: LanguageCodeEnum!) {\n  checkoutAddPromoCode(checkoutId: $checkoutId, promoCode: $promoCode) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutRemovePromoCode($checkoutId: ID, $promoCode: String, $promoCodeId: ID, $languageCode: LanguageCodeEnum!) {\n  checkoutRemovePromoCode(\n    checkoutId: $checkoutId\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n  ) {\n    errors {\n      ...CheckoutErrorFragment\n    }\n    checkout {\n      ...CheckoutFragment\n    }\n  }\n}\n\nmutation checkoutComplete($checkoutId: ID!) {\n  checkoutComplete(id: $checkoutId) {\n    order {\n      id\n      number\n      total {\n        gross {\n          ...Money\n        }\n      }\n    }\n    errors {\n      ...CheckoutErrorFragment\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateWarehouse($input: WarehouseCreateInput!) {\n  createWarehouse(input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation UpdateWarehouse($id: ID!, $input: WarehouseUpdateInput!) {\n  updateWarehouse(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation ChannelUpdateWarehouses($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      id\n      name\n      warehouses {\n        id\n        name\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DeleteWarehouse($id: ID!) {\n  deleteWarehouse(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProductVariant($id: ID!, $input: ProductVariantInput!) {\n  productVariantUpdate(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    productVariant {\n      id\n      name\n      sku\n    }\n  }\n}\n\nmutation CreateAlcoraCategory {\n  categoryCreate(\n    input: {name: \"Alcora Admin Products\", slug: \"alcoraadmin\", description: \"\"}\n  ) {\n    category {\n      id\n      name\n      slug\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateWarehouse($input: WarehouseCreateInput!) {\n  createWarehouse(input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation UpdateWarehouse($id: ID!, $input: WarehouseUpdateInput!) {\n  updateWarehouse(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    warehouse {\n      id\n      name\n      slug\n    }\n  }\n}\n\nmutation ChannelUpdateWarehouses($channelId: ID!, $warehouseIds: [ID!]!) {\n  channelUpdate(id: $channelId, input: {addWarehouses: $warehouseIds}) {\n    channel {\n      id\n      name\n      warehouses {\n        id\n        name\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DeleteWarehouse($id: ID!) {\n  deleteWarehouse(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProductVariant($id: ID!, $input: ProductVariantInput!) {\n  productVariantUpdate(id: $id, input: $input) {\n    errors {\n      field\n      message\n      code\n    }\n    productVariant {\n      id\n      name\n      sku\n    }\n  }\n}\n\nmutation CreateAlcoraCategory {\n  categoryCreate(\n    input: {name: \"Alcora Admin Products\", slug: \"alcoraadmin\", description: \"\"}\n  ) {\n    category {\n      id\n      name\n      slug\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ConfirmOrder($id: ID!) {\n  orderConfirm(id: $id) {\n    order {\n      status\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation FulfillOrder($order: ID!, $input: OrderFulfillInput!) {\n  orderFulfill(order: $order, input: $input) {\n    order {\n      id\n      status\n    }\n    fulfillments {\n      id\n    }\n    errors {\n      field\n      message\n    }\n  }\n}"): (typeof documents)["mutation ConfirmOrder($id: ID!) {\n  orderConfirm(id: $id) {\n    order {\n      status\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation FulfillOrder($order: ID!, $input: OrderFulfillInput!) {\n  orderFulfill(order: $order, input: $input) {\n    order {\n      id\n      status\n    }\n    fulfillments {\n      id\n    }\n    errors {\n      field\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation paymentGatewaysInitialize($checkoutId: ID!, $paymentGateways: [PaymentGatewayToInitialize!]) {\n  paymentGatewayInitialize(id: $checkoutId, paymentGateways: $paymentGateways) {\n    errors {\n      field\n      message\n      code\n    }\n    gatewayConfigs {\n      id\n      data\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n}\n\nmutation transactionInitialize($checkoutId: ID!, $action: TransactionFlowStrategyEnum, $paymentGateway: PaymentGatewayToInitialize!, $amount: PositiveDecimal) {\n  transactionInitialize(\n    id: $checkoutId\n    action: $action\n    paymentGateway: $paymentGateway\n    amount: $amount\n  ) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation transactionProcess($id: ID!, $data: JSON) {\n  transactionProcess(id: $id, data: $data) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation CheckoutPaymentCreate($checkoutId: ID!, $input: PaymentInput!) {\n  checkoutPaymentCreate(checkoutId: $checkoutId, input: $input) {\n    checkout {\n      id\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    payment {\n      id\n      gateway\n      token\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation paymentGatewaysInitialize($checkoutId: ID!, $paymentGateways: [PaymentGatewayToInitialize!]) {\n  paymentGatewayInitialize(id: $checkoutId, paymentGateways: $paymentGateways) {\n    errors {\n      field\n      message\n      code\n    }\n    gatewayConfigs {\n      id\n      data\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n}\n\nmutation transactionInitialize($checkoutId: ID!, $action: TransactionFlowStrategyEnum, $paymentGateway: PaymentGatewayToInitialize!, $amount: PositiveDecimal) {\n  transactionInitialize(\n    id: $checkoutId\n    action: $action\n    paymentGateway: $paymentGateway\n    amount: $amount\n  ) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation transactionProcess($id: ID!, $data: JSON) {\n  transactionProcess(id: $id, data: $data) {\n    transaction {\n      id\n      actions\n    }\n    transactionEvent {\n      message\n      type\n    }\n    data\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation CheckoutPaymentCreate($checkoutId: ID!, $input: PaymentInput!) {\n  checkoutPaymentCreate(checkoutId: $checkoutId, input: $input) {\n    checkout {\n      id\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    payment {\n      id\n      gateway\n      token\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateProductAttributes($attributes: [AttributeCreateInput!]!) {\n  attributeBulkCreate(attributes: $attributes) {\n    results {\n      attribute {\n        id\n        name\n        slug\n      }\n      errors {\n        ...AttributeBulkCreateError\n      }\n    }\n  }\n}\n\nmutation CreateProductType($name: String!, $slug: String!, $productAttributes: [ID!]!, $variantAttributes: [ID!]!, $kind: ProductTypeKindEnum!, $isShippingRequired: Boolean!) {\n  productTypeCreate(\n    input: {name: $name, slug: $slug, kind: $kind, isShippingRequired: $isShippingRequired, hasVariants: true, productAttributes: $productAttributes, variantAttributes: $variantAttributes}\n  ) {\n    productType {\n      id\n      name\n      productAttributes {\n        id\n        name\n      }\n      variantAttributes {\n        id\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation CreateProduct($input: ProductCreateInput!) {\n  productCreate(input: $input) {\n    product {\n      id\n      name\n      slug\n      variants {\n        id\n        sku\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation PublishProductToChannel($productId: ID!, $channelId: ID!) {\n  productChannelListingUpdate(\n    id: $productId\n    input: {updateChannels: [{channelId: $channelId, isPublished: true, isAvailableForPurchase: true, visibleInListings: true}]}\n  ) {\n    product {\n      id\n      name\n      channelListings {\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n    }\n    errors {\n      code\n      message\n      field\n    }\n  }\n}\n\nmutation CreateProductVariant($input: ProductVariantCreateInput!) {\n  productVariantCreate(input: $input) {\n    productVariant {\n      id\n      sku\n      name\n      pricing {\n        price {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation SetProductVariantPrice($id: ID!, $input: [ProductVariantChannelListingAddInput!]!) {\n  productVariantChannelListingUpdate(id: $id, input: $input) {\n    variant {\n      id\n      channelListings {\n        channel {\n          name\n        }\n        price {\n          amount\n          currency\n        }\n        costPrice {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProduct($id: ID!, $input: ProductInput!) {\n  productUpdate(id: $id, input: $input) {\n    product {\n      id\n      name\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateProductAttributes($attributes: [AttributeCreateInput!]!) {\n  attributeBulkCreate(attributes: $attributes) {\n    results {\n      attribute {\n        id\n        name\n        slug\n      }\n      errors {\n        ...AttributeBulkCreateError\n      }\n    }\n  }\n}\n\nmutation CreateProductType($name: String!, $slug: String!, $productAttributes: [ID!]!, $variantAttributes: [ID!]!, $kind: ProductTypeKindEnum!, $isShippingRequired: Boolean!) {\n  productTypeCreate(\n    input: {name: $name, slug: $slug, kind: $kind, isShippingRequired: $isShippingRequired, hasVariants: true, productAttributes: $productAttributes, variantAttributes: $variantAttributes}\n  ) {\n    productType {\n      id\n      name\n      productAttributes {\n        id\n        name\n      }\n      variantAttributes {\n        id\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation CreateProduct($input: ProductCreateInput!) {\n  productCreate(input: $input) {\n    product {\n      id\n      name\n      slug\n      variants {\n        id\n        sku\n        name\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation PublishProductToChannel($productId: ID!, $channelId: ID!) {\n  productChannelListingUpdate(\n    id: $productId\n    input: {updateChannels: [{channelId: $channelId, isPublished: true, isAvailableForPurchase: true, visibleInListings: true}]}\n  ) {\n    product {\n      id\n      name\n      channelListings {\n        channel {\n          id\n          name\n          currencyCode\n        }\n      }\n    }\n    errors {\n      code\n      message\n      field\n    }\n  }\n}\n\nmutation CreateProductVariant($input: ProductVariantCreateInput!) {\n  productVariantCreate(input: $input) {\n    productVariant {\n      id\n      sku\n      name\n      pricing {\n        price {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n    errors {\n      ...ProductError\n    }\n  }\n}\n\nmutation SetProductVariantPrice($id: ID!, $input: [ProductVariantChannelListingAddInput!]!) {\n  productVariantChannelListingUpdate(id: $id, input: $input) {\n    variant {\n      id\n      channelListings {\n        channel {\n          name\n        }\n        price {\n          amount\n          currency\n        }\n        costPrice {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation UpdateProduct($id: ID!, $input: ProductInput!) {\n  productUpdate(id: $id, input: $input) {\n    product {\n      id\n      name\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation PromotionCreate($input: PromotionCreateInput!) {\n  promotionCreate(input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleCreate($input: PromotionRuleCreateInput!) {\n  promotionRuleCreate(input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionUpdate($id: ID!, $input: PromotionUpdateInput!) {\n  promotionUpdate(id: $id, input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleUpdate($id: ID!, $input: PromotionRuleUpdateInput!) {\n  promotionRuleUpdate(id: $id, input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionDelete($id: ID!) {\n  promotionDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleDelete($id: ID!) {\n  promotionRuleDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}"): (typeof documents)["mutation PromotionCreate($input: PromotionCreateInput!) {\n  promotionCreate(input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleCreate($input: PromotionRuleCreateInput!) {\n  promotionRuleCreate(input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionUpdate($id: ID!, $input: PromotionUpdateInput!) {\n  promotionUpdate(id: $id, input: $input) {\n    promotion {\n      ...PromotionFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleUpdate($id: ID!, $input: PromotionRuleUpdateInput!) {\n  promotionRuleUpdate(id: $id, input: $input) {\n    promotionRule {\n      ...PromotionRuleFragment\n    }\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionDelete($id: ID!) {\n  promotionDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}\n\nmutation PromotionRuleDelete($id: ID!) {\n  promotionRuleDelete(id: $id) {\n    errors {\n      field\n      code\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ShippingZoneCreate($input: ShippingZoneCreateInput!) {\n  shippingZoneCreate(input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}\n\nmutation ShippingZoneUpdate($id: ID!, $input: ShippingZoneUpdateInput!) {\n  shippingZoneUpdate(id: $id, input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}"): (typeof documents)["mutation ShippingZoneCreate($input: ShippingZoneCreateInput!) {\n  shippingZoneCreate(input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}\n\nmutation ShippingZoneUpdate($id: ID!, $input: ShippingZoneUpdateInput!) {\n  shippingZoneUpdate(id: $id, input: $input) {\n    shippingZone {\n      ...ShippingZoneDetails\n    }\n    errors {\n      ...ShippingZoneError\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateStock($variantId: ID!, $warehouseId: ID!, $quantity: Int!) {\n  productVariantStocksUpdate(\n    variantId: $variantId\n    stocks: [{warehouse: $warehouseId, quantity: $quantity}]\n  ) {\n    productVariant {\n      stocks {\n        warehouse {\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CreateStock($variantId: ID!, $input: [StockInput!]!) {\n  productVariantStocksCreate(variantId: $variantId, stocks: $input) {\n    productVariant {\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}\n\nmutation DeleteProduct($productId: ID!) {\n  productDelete(id: $productId) {\n    errors {\n      message\n    }\n  }\n}"): (typeof documents)["mutation UpdateStock($variantId: ID!, $warehouseId: ID!, $quantity: Int!) {\n  productVariantStocksUpdate(\n    variantId: $variantId\n    stocks: [{warehouse: $warehouseId, quantity: $quantity}]\n  ) {\n    productVariant {\n      stocks {\n        warehouse {\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n    }\n  }\n}\n\nmutation CreateStock($variantId: ID!, $input: [StockInput!]!) {\n  productVariantStocksCreate(variantId: $variantId, stocks: $input) {\n    productVariant {\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n      }\n    }\n    errors {\n      message\n      field\n      code\n    }\n  }\n}\n\nmutation DeleteProduct($productId: ID!) {\n  productDelete(id: $productId) {\n    errors {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DraftOrderCreate($input: DraftOrderCreateInput!) {\n  draftOrderCreate(input: $input) {\n    order {\n      id\n      token\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n  draftOrderUpdate(id: $id, input: $input) {\n    order {\n      id\n      number\n      status\n      userEmail\n      customerNote\n      status\n      isPaid\n      lines {\n        variant {\n          id\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLinesCreate($id: ID!, $lines: [OrderLineCreateInput!]!) {\n  orderLinesCreate(id: $id, input: $lines) {\n    order {\n      id\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLineDelete($lineId: ID!) {\n  orderLineDelete(id: $lineId) {\n    order {\n      id\n      number\n      status\n    }\n    orderLine {\n      id\n      productName\n      quantity\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation OrderCreateFromDraftOrder($id: ID!) {\n  draftOrderComplete(id: $id) {\n    order {\n      id\n      status\n      number\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation DraftOrderDelete($id: ID!) {\n  draftOrderDelete(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation DraftOrderCreate($input: DraftOrderCreateInput!) {\n  draftOrderCreate(input: $input) {\n    order {\n      id\n      token\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n  draftOrderUpdate(id: $id, input: $input) {\n    order {\n      id\n      number\n      status\n      userEmail\n      customerNote\n      status\n      isPaid\n      lines {\n        variant {\n          id\n        }\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLinesCreate($id: ID!, $lines: [OrderLineCreateInput!]!) {\n  orderLinesCreate(id: $id, input: $lines) {\n    order {\n      id\n      number\n      status\n      lines {\n        id\n        productName\n        variantName\n        quantity\n      }\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation DraftOrderLineDelete($lineId: ID!) {\n  orderLineDelete(id: $lineId) {\n    order {\n      id\n      number\n      status\n    }\n    orderLine {\n      id\n      productName\n      quantity\n    }\n    errors {\n      field\n      message\n    }\n  }\n}\n\nmutation OrderCreateFromDraftOrder($id: ID!) {\n  draftOrderComplete(id: $id) {\n    order {\n      id\n      status\n      number\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n    }\n    errors {\n      field\n      message\n      code\n    }\n  }\n}\n\nmutation DraftOrderDelete($id: ID!) {\n  draftOrderDelete(id: $id) {\n    errors {\n      field\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetApps($first: Int = 10) {\n  apps(first: $first) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}"): (typeof documents)["query GetApps($first: Int = 10) {\n  apps(first: $first) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetChannelById($id: ID!) {\n  channel(id: $id) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery GetChannelBySlug($slug: String!) {\n  channel(slug: $slug) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery ListChannels {\n  channels {\n    ...ChannelBasicInfo\n  }\n}\n\nquery GetChannelWithWarehouses($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    warehouses {\n      id\n      name\n      slug\n      address {\n        streetAddress1\n        streetAddress2\n        city\n        country {\n          code\n          country\n        }\n      }\n    }\n  }\n}\n\nquery GetChannelWithShippingZones($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    availableShippingMethodsPerCountry {\n      countryCode\n      shippingMethods {\n        id\n        name\n        minimumOrderPrice {\n          ...Money\n        }\n        maximumOrderPrice {\n          ...Money\n        }\n        minimumOrderWeight {\n          unit\n          value\n        }\n        maximumOrderWeight {\n          unit\n          value\n        }\n      }\n    }\n  }\n}\n\nquery GetShippingMethods {\n  checkout(id: \"Q2hlY2tvdXQ6YjcwZWFiZGEtMTZiNi00MzY0LThkYWUtODRiNzJhYzc2MzVi\") {\n    availableShippingMethods {\n      id\n      name\n      price {\n        amount\n        currency\n      }\n    }\n    shippingMethods {\n      id\n      name\n    }\n  }\n}\n\nquery GetChannelStockSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    stockSettings {\n      allocationStrategy\n    }\n    warehouses {\n      id\n      name\n      slug\n    }\n  }\n}\n\nquery GetChannelOrderSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    orderSettings {\n      allowUnpaidOrders\n      automaticallyConfirmAllNewOrders\n      automaticallyFulfillNonShippableGiftCard\n      expireOrdersAfter\n    }\n  }\n}\n\nquery CheckProductInChannel($productId: ID!, $channelSlug: String!) {\n  product(id: $productId, channel: $channelSlug) {\n    id\n    name\n    isAvailableForPurchase\n    isAvailable\n    channelListings {\n      channel {\n        id\n        slug\n      }\n      isPublished\n      visibleInListings\n      publishedAt\n      availableForPurchaseAt\n    }\n    variants {\n      id\n      name\n      sku\n      channelListings {\n        channel {\n          id\n          slug\n        }\n        price {\n          ...Money\n        }\n        costPrice {\n          ...Money\n        }\n        preorderThreshold {\n          quantity\n        }\n      }\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n        quantityAllocated\n      }\n    }\n  }\n}\n\nquery ListProductsInChannel($channelSlug: String!, $first: Int = 100, $after: String, $filter: ProductFilterInput) {\n  products(channel: $channelSlug, first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        thumbnail {\n          url\n          alt\n        }\n        category {\n          id\n          name\n        }\n        channelListings {\n          channel {\n            id\n            slug\n          }\n          isPublished\n          visibleInListings\n        }\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetLowStockProductsInChannel($channelSlug: String!, $threshold: Int = 10, $first: Int = 100) {\n  products(channel: $channelSlug, first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetChannelById($id: ID!) {\n  channel(id: $id) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery GetChannelBySlug($slug: String!) {\n  channel(slug: $slug) {\n    ...ChannelDetailedInfo\n  }\n}\n\nquery ListChannels {\n  channels {\n    ...ChannelBasicInfo\n  }\n}\n\nquery GetChannelWithWarehouses($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    warehouses {\n      id\n      name\n      slug\n      address {\n        streetAddress1\n        streetAddress2\n        city\n        country {\n          code\n          country\n        }\n      }\n    }\n  }\n}\n\nquery GetChannelWithShippingZones($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    slug\n    availableShippingMethodsPerCountry {\n      countryCode\n      shippingMethods {\n        id\n        name\n        minimumOrderPrice {\n          ...Money\n        }\n        maximumOrderPrice {\n          ...Money\n        }\n        minimumOrderWeight {\n          unit\n          value\n        }\n        maximumOrderWeight {\n          unit\n          value\n        }\n      }\n    }\n  }\n}\n\nquery GetShippingMethods {\n  checkout(id: \"Q2hlY2tvdXQ6YjcwZWFiZGEtMTZiNi00MzY0LThkYWUtODRiNzJhYzc2MzVi\") {\n    availableShippingMethods {\n      id\n      name\n      price {\n        amount\n        currency\n      }\n    }\n    shippingMethods {\n      id\n      name\n    }\n  }\n}\n\nquery GetChannelStockSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    stockSettings {\n      allocationStrategy\n    }\n    warehouses {\n      id\n      name\n      slug\n    }\n  }\n}\n\nquery GetChannelOrderSettings($id: ID!) {\n  channel(id: $id) {\n    id\n    name\n    orderSettings {\n      allowUnpaidOrders\n      automaticallyConfirmAllNewOrders\n      automaticallyFulfillNonShippableGiftCard\n      expireOrdersAfter\n    }\n  }\n}\n\nquery CheckProductInChannel($productId: ID!, $channelSlug: String!) {\n  product(id: $productId, channel: $channelSlug) {\n    id\n    name\n    isAvailableForPurchase\n    isAvailable\n    channelListings {\n      channel {\n        id\n        slug\n      }\n      isPublished\n      visibleInListings\n      publishedAt\n      availableForPurchaseAt\n    }\n    variants {\n      id\n      name\n      sku\n      channelListings {\n        channel {\n          id\n          slug\n        }\n        price {\n          ...Money\n        }\n        costPrice {\n          ...Money\n        }\n        preorderThreshold {\n          quantity\n        }\n      }\n      stocks {\n        warehouse {\n          id\n          name\n        }\n        quantity\n        quantityAllocated\n      }\n    }\n  }\n}\n\nquery ListProductsInChannel($channelSlug: String!, $first: Int = 100, $after: String, $filter: ProductFilterInput) {\n  products(channel: $channelSlug, first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        thumbnail {\n          url\n          alt\n        }\n        category {\n          id\n          name\n        }\n        channelListings {\n          channel {\n            id\n            slug\n          }\n          isPublished\n          visibleInListings\n        }\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetLowStockProductsInChannel($channelSlug: String!, $threshold: Int = 10, $first: Int = 100) {\n  products(channel: $channelSlug, first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          channelListings {\n            channel {\n              id\n              slug\n            }\n            price {\n              ...Money\n            }\n          }\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CheckoutFind($id: ID!) {\n  checkout(id: $id) {\n    id\n    email\n    lines {\n      id\n      quantity\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n      variant {\n        product {\n          id\n          name\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            name\n          }\n        }\n        pricing {\n          price {\n            gross {\n              ...Money\n            }\n          }\n        }\n        name\n        id\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nquery checkout($id: ID!, $languageCode: LanguageCodeEnum!) {\n  checkout(id: $id) {\n    ...CheckoutFragment\n  }\n}\n\nquery channel($slug: String!) {\n  channel(slug: $slug) {\n    countries {\n      code\n    }\n  }\n}\n\nquery addressValidationRules($countryCode: CountryCode!) {\n  addressValidationRules(countryCode: $countryCode) {\n    ...ValidationRulesFragment\n  }\n}"): (typeof documents)["query CheckoutFind($id: ID!) {\n  checkout(id: $id) {\n    id\n    email\n    lines {\n      id\n      quantity\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n      variant {\n        product {\n          id\n          name\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            name\n          }\n        }\n        pricing {\n          price {\n            gross {\n              ...Money\n            }\n          }\n        }\n        name\n        id\n      }\n    }\n    totalPrice {\n      gross {\n        ...Money\n      }\n    }\n  }\n}\n\nquery checkout($id: ID!, $languageCode: LanguageCodeEnum!) {\n  checkout(id: $id) {\n    ...CheckoutFragment\n  }\n}\n\nquery channel($slug: String!) {\n  channel(slug: $slug) {\n    countries {\n      code\n    }\n  }\n}\n\nquery addressValidationRules($countryCode: CountryCode!) {\n  addressValidationRules(countryCode: $countryCode) {\n    ...ValidationRulesFragment\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery ProductsInventory($first: Int = 50, $after: String, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        productType {\n          id\n          name\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n        variants {\n          id\n          name\n          sku\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          stocks {\n            ...StockBasic\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery LowStockProducts($threshold: Int = 10, $first: Int = 100) {\n  products(first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery Warehouses($first: Int = 100) {\n  warehouses(first: $first) {\n    edges {\n      node {\n        ...WarehouseDetails\n      }\n    }\n  }\n}\n\nquery ChannelWarehouses($channelId: ID!) {\n  channel(id: $channelId) {\n    id\n    warehouses {\n      id\n      name\n    }\n  }\n}\n\nquery WarehouseStock($id: ID!, $first: Int = 100) {\n  warehouse(id: $id) {\n    ...WarehouseBasic\n    stocks(first: $first) {\n      edges {\n        node {\n          id\n          productVariant {\n            id\n            name\n            sku\n          }\n          quantity\n          quantityAllocated\n        }\n      }\n    }\n  }\n}\n\nquery GetInventory($channel: String!, $first: Int, $after: String) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          quantityAvailable\n          quantityOrdered\n          margin\n          quantityLimitPerCustomer\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"): (typeof documents)["query ProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery ProductsInventory($first: Int = 50, $after: String, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        productType {\n          id\n          name\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n        variants {\n          id\n          name\n          sku\n          pricing {\n            price {\n              gross {\n                ...Money\n              }\n            }\n          }\n          stocks {\n            ...StockBasic\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery LowStockProducts($threshold: Int = 10, $first: Int = 100) {\n  products(first: $first) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          sku\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n  }\n}\n\nquery Warehouses($first: Int = 100) {\n  warehouses(first: $first) {\n    edges {\n      node {\n        ...WarehouseDetails\n      }\n    }\n  }\n}\n\nquery ChannelWarehouses($channelId: ID!) {\n  channel(id: $channelId) {\n    id\n    warehouses {\n      id\n      name\n    }\n  }\n}\n\nquery WarehouseStock($id: ID!, $first: Int = 100) {\n  warehouse(id: $id) {\n    ...WarehouseBasic\n    stocks(first: $first) {\n      edges {\n        node {\n          id\n          productVariant {\n            id\n            name\n            sku\n          }\n          quantity\n          quantityAllocated\n        }\n      }\n    }\n  }\n}\n\nquery GetInventory($channel: String!, $first: Int, $after: String) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        variants {\n          id\n          name\n          quantityAvailable\n          quantityOrdered\n          margin\n          quantityLimitPerCustomer\n          stocks {\n            warehouse {\n              id\n              name\n            }\n            quantity\n            quantityAllocated\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query order($id: ID!, $languageCode: LanguageCodeEnum!) {\n  order(id: $id) {\n    ...OrderFragment\n  }\n}\n\nquery FindOrder($id: ID!) {\n  order(id: $id) {\n    ...OrderBasic\n    lines {\n      id\n      variant {\n        id\n      }\n      productName\n      quantity\n      unitPrice {\n        gross {\n          ...Money\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    shippingAddress {\n      firstName\n      lastName\n      streetAddress1\n      city\n      country {\n        code\n      }\n    }\n  }\n}\n\nquery GetOrdersByStatus($status: [OrderStatusFilter!]!, $first: Int!) {\n  orders(first: $first, filter: {status: $status}) {\n    edges {\n      node {\n        id\n        status\n        userEmail\n        created\n        number\n        total {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOrderFulfillment($id: ID!) {\n  order(id: $id) {\n    ...OrderFulfillment\n  }\n}\n\nquery GetOrdersByChannel($channel: String!, $first: Int, $filter: OrderFilterInput) {\n  orders(channel: $channel, first: $first, filter: $filter) {\n    edges {\n      node {\n        id\n        number\n        status\n        created\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query order($id: ID!, $languageCode: LanguageCodeEnum!) {\n  order(id: $id) {\n    ...OrderFragment\n  }\n}\n\nquery FindOrder($id: ID!) {\n  order(id: $id) {\n    ...OrderBasic\n    lines {\n      id\n      variant {\n        id\n      }\n      productName\n      quantity\n      unitPrice {\n        gross {\n          ...Money\n        }\n      }\n      totalPrice {\n        gross {\n          ...Money\n        }\n      }\n    }\n    shippingAddress {\n      firstName\n      lastName\n      streetAddress1\n      city\n      country {\n        code\n      }\n    }\n  }\n}\n\nquery GetOrdersByStatus($status: [OrderStatusFilter!]!, $first: Int!) {\n  orders(first: $first, filter: {status: $status}) {\n    edges {\n      node {\n        id\n        status\n        userEmail\n        created\n        number\n        total {\n          gross {\n            ...Money\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOrderFulfillment($id: ID!) {\n  order(id: $id) {\n    ...OrderFulfillment\n  }\n}\n\nquery GetOrdersByChannel($channel: String!, $first: Int, $filter: OrderFilterInput) {\n  orders(channel: $channel, first: $first, filter: $filter) {\n    edges {\n      node {\n        id\n        number\n        status\n        created\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductList($first: Int = 9, $channel: String!) {\n  products(first: $first, channel: $channel) {\n    edges {\n      node {\n        productType {\n          id\n          name\n        }\n        ...ProductListItem\n      }\n    }\n  }\n}\n\nquery GetProducts($first: Int!, $after: String, $channel: String!, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, channel: $channel, filter: $filter) {\n    edges {\n      node {\n        ...ProductBasic\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductDetails($id: ID!, $channel: String!) {\n  product(id: $id, channel: $channel) {\n    ...ProductDetails\n  }\n}\n\nquery SearchProductsBasic($search: String!, $first: Int!, $channel: String!) {\n  products(first: $first, filter: {search: $search}, channel: $channel) {\n    edges {\n      node {\n        ...ProductBasic\n        variants {\n          id\n          name\n          sku\n        }\n      }\n    }\n  }\n}\n\nquery GetProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery GetAllCategories {\n  categories(first: 50) {\n    edges {\n      node {\n        id\n        name\n        slug\n      }\n    }\n  }\n}\n\nquery GetProductsByCategory($categoryId: ID!) {\n  category(id: $categoryId) {\n    id\n    name\n    products(first: 100, channel: \"Q2hhbm5lbDoz\") {\n      edges {\n        node {\n          ...ProductBasic\n        }\n      }\n    }\n  }\n}\n\nquery ProductListByCategory($slug: String!, $channel: String!) {\n  category(slug: $slug) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100, channel: $channel) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetCategories($first: Int!) {\n  categories(first: $first) {\n    edges {\n      node {\n        id\n        name\n        slug\n        products(first: $first) {\n          totalCount\n        }\n      }\n    }\n  }\n}\n\nquery SearchProductsSorted($search: String!, $sortBy: ProductOrderField!, $sortDirection: OrderDirection!, $first: Int!, $after: String, $channel: String!) {\n  products(\n    first: $first\n    after: $after\n    channel: $channel\n    sortBy: {field: $sortBy, direction: $sortDirection}\n    filter: {search: $search}\n  ) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListPaginated($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListByCollection($slug: String!, $channel: String!) {\n  collection(slug: $slug, channel: $channel) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetProductTypeBySlug($slug: String!) {\n  productTypes(filter: {search: $slug}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        productAttributes {\n          id\n          name\n        }\n        variantAttributes {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nquery GetAttributeBySlug($slug: String!) {\n  attributes(filter: {slugs: [$slug]}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        inputType\n        type\n      }\n    }\n  }\n}\n\nquery GetProductsForMeiliSearch($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        slug\n        variants {\n          id\n          name\n          sku\n          quantityAvailable\n          channelListings {\n            costPrice {\n              currency\n              amount\n            }\n          }\n          pricing {\n            price {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        pricing {\n          priceRange {\n            start {\n              gross {\n                currency\n                amount\n              }\n            }\n            stop {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductBySlug($slug: String!) {\n  product(slug: $slug) {\n    id\n    name\n    slug\n    variants {\n      id\n      name\n      sku\n    }\n  }\n}"): (typeof documents)["query ProductList($first: Int = 9, $channel: String!) {\n  products(first: $first, channel: $channel) {\n    edges {\n      node {\n        productType {\n          id\n          name\n        }\n        ...ProductListItem\n      }\n    }\n  }\n}\n\nquery GetProducts($first: Int!, $after: String, $channel: String!, $filter: ProductFilterInput) {\n  products(first: $first, after: $after, channel: $channel, filter: $filter) {\n    edges {\n      node {\n        ...ProductBasic\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductDetails($id: ID!, $channel: String!) {\n  product(id: $id, channel: $channel) {\n    ...ProductDetails\n  }\n}\n\nquery SearchProductsBasic($search: String!, $first: Int!, $channel: String!) {\n  products(first: $first, filter: {search: $search}, channel: $channel) {\n    edges {\n      node {\n        ...ProductBasic\n        variants {\n          id\n          name\n          sku\n        }\n      }\n    }\n  }\n}\n\nquery GetProductInventory($id: ID!) {\n  product(id: $id) {\n    ...ProductInventory\n  }\n}\n\nquery GetAllCategories {\n  categories(first: 50) {\n    edges {\n      node {\n        id\n        name\n        slug\n      }\n    }\n  }\n}\n\nquery GetProductsByCategory($categoryId: ID!) {\n  category(id: $categoryId) {\n    id\n    name\n    products(first: 100, channel: \"Q2hhbm5lbDoz\") {\n      edges {\n        node {\n          ...ProductBasic\n        }\n      }\n    }\n  }\n}\n\nquery ProductListByCategory($slug: String!, $channel: String!) {\n  category(slug: $slug) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100, channel: $channel) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetCategories($first: Int!) {\n  categories(first: $first) {\n    edges {\n      node {\n        id\n        name\n        slug\n        products(first: $first) {\n          totalCount\n        }\n      }\n    }\n  }\n}\n\nquery SearchProductsSorted($search: String!, $sortBy: ProductOrderField!, $sortDirection: OrderDirection!, $first: Int!, $after: String, $channel: String!) {\n  products(\n    first: $first\n    after: $after\n    channel: $channel\n    sortBy: {field: $sortBy, direction: $sortDirection}\n    filter: {search: $search}\n  ) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListPaginated($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    totalCount\n    edges {\n      node {\n        ...ProductListItem\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nquery ProductListByCollection($slug: String!, $channel: String!) {\n  collection(slug: $slug, channel: $channel) {\n    name\n    description\n    seoDescription\n    seoTitle\n    products(first: 100) {\n      edges {\n        node {\n          ...ProductListItem\n        }\n      }\n    }\n  }\n}\n\nquery GetProductTypeBySlug($slug: String!) {\n  productTypes(filter: {search: $slug}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        productAttributes {\n          id\n          name\n        }\n        variantAttributes {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nquery GetAttributeBySlug($slug: String!) {\n  attributes(filter: {slugs: [$slug]}, first: 1) {\n    edges {\n      node {\n        id\n        name\n        slug\n        inputType\n        type\n      }\n    }\n  }\n}\n\nquery GetProductsForMeiliSearch($first: Int!, $after: String, $channel: String!) {\n  products(first: $first, after: $after, channel: $channel) {\n    edges {\n      node {\n        id\n        name\n        slug\n        variants {\n          id\n          name\n          sku\n          quantityAvailable\n          channelListings {\n            costPrice {\n              currency\n              amount\n            }\n          }\n          pricing {\n            price {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        pricing {\n          priceRange {\n            start {\n              gross {\n                currency\n                amount\n              }\n            }\n            stop {\n              gross {\n                currency\n                amount\n              }\n            }\n          }\n        }\n        category {\n          id\n          name\n        }\n        thumbnail {\n          url\n          alt\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n\nquery GetProductBySlug($slug: String!) {\n  product(slug: $slug) {\n    id\n    name\n    slug\n    variants {\n      id\n      name\n      sku\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Promotions($first: Int, $after: String) {\n  promotions(first: $first, after: $after) {\n    edges {\n      node {\n        ...PromotionFragment\n        rules {\n          id\n          name\n          rewardValueType\n          rewardValue\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery Promotion($id: ID!) {\n  promotion(id: $id) {\n    ...PromotionFragment\n    rules {\n      ...PromotionRuleFragment\n    }\n    events {\n      ... on PromotionEventInterface {\n        type\n        date\n        createdBy {\n          ... on User {\n            id\n            email\n          }\n        }\n      }\n      ... on PromotionRuleEventInterface {\n        ruleId\n      }\n    }\n  }\n}"): (typeof documents)["query Promotions($first: Int, $after: String) {\n  promotions(first: $first, after: $after) {\n    edges {\n      node {\n        ...PromotionFragment\n        rules {\n          id\n          name\n          rewardValueType\n          rewardValue\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n\nquery Promotion($id: ID!) {\n  promotion(id: $id) {\n    ...PromotionFragment\n    rules {\n      ...PromotionRuleFragment\n    }\n    events {\n      ... on PromotionEventInterface {\n        type\n        date\n        createdBy {\n          ... on User {\n            id\n            email\n          }\n        }\n      }\n      ... on PromotionRuleEventInterface {\n        ruleId\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CheckStock($productId: ID!) {\n  product(id: $productId) {\n    name\n    variants {\n      sku\n      attributes {\n        attribute {\n          id\n          name\n        }\n        values {\n          id\n          name\n        }\n      }\n      stocks {\n        quantity\n        warehouse {\n          name\n        }\n      }\n    }\n    channelListings {\n      channel {\n        name\n      }\n    }\n  }\n}"): (typeof documents)["query CheckStock($productId: ID!) {\n  product(id: $productId) {\n    name\n    variants {\n      sku\n      attributes {\n        attribute {\n          id\n          name\n        }\n        values {\n          id\n          name\n        }\n      }\n      stocks {\n        quantity\n        warehouse {\n          name\n        }\n      }\n    }\n    channelListings {\n      channel {\n        name\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DraftOrderDetails($id: ID!) {\n  order(id: $id) {\n    id\n    token\n    created\n    status\n    number\n    userEmail\n    customerNote\n    shippingAddress {\n      firstName\n      lastName\n      phone\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    subtotal {\n      gross {\n        amount\n        currency\n      }\n    }\n    lines {\n      id\n      productName\n      variantName\n      quantity\n      unitPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      variant {\n        id\n        product {\n          id\n          name\n        }\n      }\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    metadata {\n      key\n      value\n    }\n    privateMetadata {\n      key\n      value\n    }\n  }\n}\n\nquery DraftOrders($first: Int!, $after: String) {\n  draftOrders(first: $first, after: $after) {\n    edges {\n      node {\n        id\n        created\n        status\n        number\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n        lines {\n          id\n          productName\n          quantity\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"): (typeof documents)["query DraftOrderDetails($id: ID!) {\n  order(id: $id) {\n    id\n    token\n    created\n    status\n    number\n    userEmail\n    customerNote\n    shippingAddress {\n      firstName\n      lastName\n      phone\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    subtotal {\n      gross {\n        amount\n        currency\n      }\n    }\n    lines {\n      id\n      productName\n      variantName\n      quantity\n      unitPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      totalPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      variant {\n        id\n        product {\n          id\n          name\n        }\n      }\n    }\n    total {\n      gross {\n        amount\n        currency\n      }\n    }\n    metadata {\n      key\n      value\n    }\n    privateMetadata {\n      key\n      value\n    }\n  }\n}\n\nquery DraftOrders($first: Int!, $after: String) {\n  draftOrders(first: $first, after: $after) {\n    edges {\n      node {\n        id\n        created\n        status\n        number\n        userEmail\n        total {\n          gross {\n            amount\n            currency\n          }\n        }\n        lines {\n          id\n          productName\n          quantity\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription OrderUpdated {\n  orderUpdated {\n    order {\n      id\n      status\n    }\n  }\n}\n\nsubscription OrderCreatedSubscription {\n  event {\n    ...OrderCreatedWebhookPayload\n  }\n}"): (typeof documents)["subscription OrderUpdated {\n  orderUpdated {\n    order {\n      id\n      status\n    }\n  }\n}\n\nsubscription OrderCreatedSubscription {\n  event {\n    ...OrderCreatedWebhookPayload\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;