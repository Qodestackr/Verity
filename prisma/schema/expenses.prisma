model ExpenseCategory {
  id                  String               @id @default(cuid())
  organizationId      String
  name                String
  description         String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  budgetAllocations   BudgetAllocation[]
  expenses            Expense[]
  organization        Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  forecastCategories  ForecastCategory[]
  scenarioAllocations ScenarioAllocation[]
  shiftExpenses       ShiftExpense[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

model Vendor {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  contactPerson  String?
  email          String?
  phone          String?
  address        String?
  taxId          String?
  isActive       Boolean      @default(true)
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  expenses       Expense[]
  purchases      Purchase[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([name])
}

model Expense {
  id               String           @id @default(cuid())
  organizationId   String
  categoryId       String
  vendorId         String?
  amount           Float
  description      String
  receiptUrl       String?
  paymentMethod    POSPaymentMethod
  paymentStatus    PaymentStatus    @default(PENDING)
  expenseDate      DateTime
  approvalStatus   ApprovalStatus   @default(PENDING)
  approvedById     String?
  approvedAt       DateTime?
  reimbursable     Boolean          @default(false)
  reimbursedTo     String?
  taxDeductible    Boolean          @default(false)
  taxAmount        Float?
  recurringExpense Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  purchaseId       String?
  category         ExpenseCategory  @relation(fields: [categoryId], references: [id])
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchase         Purchase?        @relation(fields: [purchaseId], references: [id])
  vendor           Vendor?          @relation(fields: [vendorId], references: [id])

  @@index([organizationId])
  @@index([categoryId])
  @@index([vendorId])
  @@index([expenseDate])
  @@index([approvalStatus])
}

model Purchase {
  id               String            @id @default(cuid())
  organizationId   String
  vendorId         String
  purchaseNumber   String            @unique
  status           PurchaseStatus    @default(DRAFT)
  orderDate        DateTime
  expectedDelivery DateTime?
  deliveredDate    DateTime?
  totalAmount      Float
  notes            String?
  paymentStatus    PaymentStatus     @default(PENDING)
  paymentDueDate   DateTime?
  paymentMethod    POSPaymentMethod?
  paymentReference String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  expenses         Expense[]
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vendor           Vendor            @relation(fields: [vendorId], references: [id])
  items            PurchaseItem[]

  @@index([organizationId])
  @@index([vendorId])
  @@index([status])
  @@index([orderDate])
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  received   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@index([productId])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum PurchaseStatus {
  DRAFT
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}
