model FiscalPeriod {
  id               String           @id @default(cuid())
  organizationId   String
  name             String
  startDate        DateTime
  endDate          DateTime
  isClosed         Boolean          @default(false)
  closedAt         DateTime?
  closedBy         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  financialEntries FinancialEntry[]
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([startDate, endDate])
}

model FinancialAccount {
  id             String               @id @default(cuid())
  organizationId String
  name           String
  accountNumber  String?
  accountType    FinancialAccountType
  description    String?
  isActive       Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  entries        FinancialEntry[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([accountType])
}

model FinancialEntry {
  id              String           @id @default(cuid())
  organizationId  String
  accountId       String
  fiscalPeriodId  String
  amount          Float
  description     String
  entryType       EntryType
  referenceType   String? // "ShiftTransaction" BUT ALSO HAS OTHER ENTRIES OUTSIDE POS.
  referenceId     String? // FK value (not formal FK to keep generic)
  transactionDate DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Reconciliation link to prevent revenue inflation
  reconciliationId String?
  isDisputed      Boolean          @default(false)
  disputeAmount   Float?           // Amount under dispute (prevents revenue recognition)
  
  account         FinancialAccount @relation(fields: [accountId], references: [id])
  fiscalPeriod    FiscalPeriod     @relation(fields: [fiscalPeriodId], references: [id])
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reconciliation  ReconciliationEntry? @relation(fields: [reconciliationId], references: [id])

  @@index([organizationId])
  @@index([accountId])
  @@index([fiscalPeriodId])
  @@index([transactionDate])
  @@index([entryType])
  @@index([reconciliationId])
  @@index([isDisputed])
}

model Budget {
  id             String             @id @default(cuid())
  organizationId String
  name           String
  startDate      DateTime
  endDate        DateTime
  totalAmount    Float
  description    String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  allocations    BudgetAllocation[]
  scenarios      BudgetScenario[]

  @@index([organizationId])
  @@index([startDate, endDate])
}

model BudgetAllocation {
  id         String          @id @default(cuid())
  budgetId   String
  categoryId String
  amount     Float
  notes      String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  budget     Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@index([budgetId])
  @@index([categoryId])
}

model BudgetForecast {
  id               String             @id @default(cuid())
  organizationId   String
  generatedDate    DateTime           @default(now())
  startDate        DateTime
  endDate          DateTime
  forecastMonths   Int
  historyMonths    Int
  confidenceScore  Float
  avgExpenseGrowth Float
  avgRevenueGrowth Float
  avgProfitMargin  Float
  notes            String?
  organization     Organization       @relation(fields: [organizationId], references: [id])
  categories       ForecastCategory[]
  insights         ForecastInsight[]
}

model ForecastCategory {
  id         String          @id @default(cuid())
  forecastId String
  categoryId String
  month      String
  amount     Float
  percentage Float
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])
  forecast   BudgetForecast  @relation(fields: [forecastId], references: [id], onDelete: Cascade)
}

model ForecastInsight {
  id          String         @id @default(cuid())
  forecastId  String
  type        String
  title       String
  description String
  action      String
  forecast    BudgetForecast @relation(fields: [forecastId], references: [id], onDelete: Cascade)
}

model BudgetScenario {
  id             String               @id @default(cuid())
  organizationId String
  budgetId       String
  name           String
  description    String?
  isBaseline     Boolean              @default(false)
  totalAmount    Float
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  budget         Budget               @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  organization   Organization         @relation(fields: [organizationId], references: [id])
  allocations    ScenarioAllocation[]
  assumptions    ScenarioAssumption[]
  impacts        ScenarioImpact[]
}

model ScenarioAllocation {
  id            String          @id @default(cuid())
  scenarioId    String
  categoryId    String
  amount        Float
  changePercent Float?
  notes         String?
  category      ExpenseCategory @relation(fields: [categoryId], references: [id])
  scenario      BudgetScenario  @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
}

model ScenarioAssumption {
  id          String         @id @default(cuid())
  scenarioId  String
  type        String
  name        String
  description String
  changeType  String
  changeValue Float
  appliedTo   String?
  scenario    BudgetScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
}

model ScenarioImpact {
  id            String         @id @default(cuid())
  scenarioId    String
  metricName    String
  baselineValue Float
  scenarioValue Float
  changePercent Float
  impact        String
  scenario      BudgetScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
}

enum FinancialAccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum EntryType {
  DEBIT
  CREDIT
}
